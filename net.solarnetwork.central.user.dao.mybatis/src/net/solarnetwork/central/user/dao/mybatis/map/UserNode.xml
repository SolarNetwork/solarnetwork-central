<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Tue Nov 11 06:02:38 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.user.dao.mybatis.UserNode">

	<cache/>

	<insert id="insert-UserNode" parameterType="UserNode">
		INSERT INTO solaruser.user_node 
			(node_id
			<if test="created != null">,created</if>
			, user_id, disp_name, description, private)
		VALUES
			(#{node.id}
			<if test="created != null">,#{created}</if>
			, #{user.id}, #{name}, #{description}, #{requiresAuthorization})
	</insert>

	<update id="update-UserNode" parameterType="UserNode">
		UPDATE
			solaruser.user_node 
		SET
			disp_name = #{name}, 
			user_id = #{user.id},
			description = #{description},
			private = #{requiresAuthorization}
		WHERE
			node_id = #{node.id}
	</update>

	<sql id="fragment-UserNode-full-result">
		un.node_id AS user_node_node_id,
		un.created AS user_node_created,
		un.disp_name AS user_node_disp_name,
		un.user_id AS user_node_user_id,
		un.description AS user_node_description,
		un.private AS user_node_private
	</sql>

	<resultMap id="UserNodeFullResult" type="UserNode">
		<id property="id" column="user_node_node_id"/>
		<result property="created" column="user_node_created"/>
		<result property="name" column="user_node_disp_name"/>
		<result property="description" column="user_node_description"/>
		<result property="requiresAuthorization" column="user_node_private"/>
		<association property="node" resultMap="net.solarnetwork.central.dao.mybatis.SolarNode.SolarNodeFullResult"/>
		<association property="user" resultMap="net.solarnetwork.central.user.dao.mybatis.User.UserFullResult"/>
	</resultMap>
	
	<sql id="fragment-UserNode-select-full">
		SELECT
			<include refid="fragment-UserNode-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarNode.fragment-SolarNode-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-SolarLocation-full-result"/>,
			<include refid="net.solarnetwork.central.user.dao.mybatis.User.fragment-User-full-result"/>
		FROM
			solaruser.user_node un
		INNER JOIN
			solarnet.sn_node n ON n.node_id = un.node_id
		INNER JOIN
			solarnet.sn_loc l ON l.id = n.loc_id
		INNER JOIN
			solaruser.user_user u ON u.id = un.user_id
	</sql>
	
	<select id="get-UserNode-for-id" parameterType="long" resultMap="UserNodeFullResult">
		<include refid="fragment-UserNode-select-full"/>
		WHERE
			un.node_id = #{id}
	</select>
	
	<select id="find-UserNode-for-User" parameterType="long" resultMap="UserNodeFullResult">
		<include refid="fragment-UserNode-select-full"/>
		WHERE
			u.id = #{id}
			AND un.archived = FALSE
		ORDER BY
			un.created
	</select>
	
	<select id="find-archived-UserNode-for-User" parameterType="long" resultMap="UserNodeFullResult" useCache="false">
		<include refid="fragment-UserNode-select-full"/>
		WHERE
			u.id = #{id}
			AND un.archived = TRUE
		ORDER BY
			un.created
	</select>

	<update id="update-archived-UserNode-status" parameterType="map">
		UPDATE
			solaruser.user_node 
		SET
			archived = #{archived}
		WHERE
			user_id = #{userId}
			AND node_id = ANY (#{nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
	</update>
	
	<resultMap id="UserNodeWithCertificates" type="UserNode" extends="UserNodeFullResult">
		<association property="certificate" notNullColumn="uncert_user_id,uncert_node_id" resultMap="net.solarnetwork.central.user.dao.mybatis.UserNodeCertificate.UserNodeCertificateFullResult"/>
		<association property="transfer" notNullColumn="unxfer_user_id,unxfer_node_id" resultMap="net.solarnetwork.central.user.dao.mybatis.UserNodeTransfer.UserNodeTransferFullResult"/>
	</resultMap>
	
	<select id="find-UserNode-for-user-with-certs" parameterType="long" resultMap="UserNodeWithCertificates">
		SELECT
			<include refid="fragment-UserNode-full-result"/>,
			<include refid="net.solarnetwork.central.user.dao.mybatis.UserNodeCertificate.fragment-UserNodeCertificate-full-result"/>,
			<include refid="net.solarnetwork.central.user.dao.mybatis.UserNodeTransfer.fragment-UserNodeTransfer-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarNode.fragment-SolarNode-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-SolarLocation-full-result"/>,
			<include refid="net.solarnetwork.central.user.dao.mybatis.User.fragment-User-full-result"/>
		FROM
			solaruser.user_node un
		INNER JOIN
			solarnet.sn_node n ON n.node_id = un.node_id
		INNER JOIN
			solarnet.sn_loc l ON l.id = n.loc_id
		INNER JOIN
			solaruser.user_user u ON u.id = un.user_id
		LEFT OUTER JOIN
			solaruser.user_node_cert uncert ON uncert.user_id = un.user_id AND uncert.node_id = un.node_id
		LEFT OUTER JOIN
			solaruser.user_node_xfer unxfer ON unxfer.user_id = un.user_id AND unxfer.node_id = un.node_id
		WHERE
			un.user_id = #{id}
			AND un.archived = FALSE
		ORDER BY
			un.node_id ASC
	</select>
	
	<select id="find-node-ids-for-user-id" resultType="long" parameterType="long">
		SELECT DISTINCT
			un.node_id
		FROM
			solaruser.user_node un
		WHERE 
			un.user_id = #{id}
			AND un.archived = FALSE		
		ORDER BY
			un.node_id
	</select>
	
	<select id="find-node-ids-for-token-id" resultType="long" parameterType="string">
		SELECT 
			node_id
		FROM
			solaruser.user_auth_token_nodes
		WHERE 
			auth_token = #{id}
		ORDER BY
			node_id
	</select>

	<resultMap id="NodeSourcePKResult" type="net.solarnetwork.central.datum.domain.NodeSourcePK">
		<id property="nodeId" column="node_id"/>
		<id property="sourceId" column="source_id"/>
	</resultMap>
	
	<select id="find-source-ids-for-token-id" resultMap="NodeSourcePKResult" parameterType="map">
		SELECT DISTINCT
			node_id,
			source_id
		FROM
			solaruser.user_auth_token_sources
		WHERE 
			auth_token = #{id}
			<if test="startDate != null">AND ts &gt;= ${startDate}</if>
			<if test="endDate != null">AND ts &lt; ${startDate}</if>
		ORDER BY
			node_id, source_id
	</select>
	
</mapper>
