<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.event.domain.DatumAppEventEntity">

	<parameterMap id="pmap-DatumAppEventEntity" type="net.solarnetwork.central.datum.dao.DatumAppEventEntity">
		<parameter property="topic" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="created" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="nodeId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="sourceId" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="eventJson" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<update id="update-DatumAppEventEntity" parameterMap="pmap-DatumAppEventEntity" statementType="CALLABLE">
		{call solardatum.store_datum_event(?, ?, ?, ?, ?)}
	</update>

	<sql id="fragment-DatumAppEventEntity-full-result">
		de.topic AS datum_event_topic
		, de.ts AS datum_event_ts
		, de.node_id AS datum_event_node_id
		, de.source_id AS datum_event_source_id
		, de.jdata AS datum_event_jdata
	</sql>
	
	<resultMap id="DatumAppEventEntity-FullResult" type="net.solarnetwork.central.datum.dao.DatumAppEventEntity">
		<constructor>
			<idArg  column="datum_event_topic" javaType="String"/>
			<idArg column="datum_event_ts" javaType="java.time.Instant"/>
			<idArg column="datum_event_node_id" javaType="Long"/>
			<idArg column="datum_event_source_id" javaType="String"/>
			<arg column="datum_event_jdata" javaType="String"/>
		</constructor>
	</resultMap>

	<select id="get-DatumAppEventEntity-for-id" parameterType="net.solarnetwork.central.datum.dao.DatumAppEventKey" resultMap="DatumAppEventEntity-FullResult">
		SELECT
			<include refid="fragment-DatumAppEventEntity-full-result"/>
		FROM
			solardatum.da_datum_event de
		WHERE
			de.topic = #{topic}
			AND de.ts = #{created}
			AND de.node_id = #{nodeId}
			AND de.source_id = #{sourceId}
	</select>

</mapper>
