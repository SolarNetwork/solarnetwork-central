<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Thu Nov 13 07:30:21 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.v2.dao.mybatis.AuditDatumEntity">

	<resultMap id="AuditDatumEntityRollup-FullResult" type="net.solarnetwork.central.datum.v2.dao.AuditDatumEntityRollup">
		<constructor>
			<idArg column="aud_node_id" javaType="java.lang.Long"/>
			<idArg column="aud_source_id" javaType="java.lang.String"/>
			<idArg column="aud_ts" javaType="java.time.Instant"/>
			<arg column="aud_agg_kind" javaType="net.solarnetwork.central.domain.Aggregation"/>
			<arg column="aud_datum_count" javaType="java.lang.Long"/>
			<arg column="aud_datum_hourly_count" javaType="java.lang.Long"/>
			<arg column="aud_datum_daily_count" javaType="java.lang.Integer"/>
			<arg column="aud_datum_monthly_count" javaType="java.lang.Integer"/>
			<arg column="aud_datum_prop_count" javaType="java.lang.Long"/>
			<arg column="aud_datum_query_count" javaType="java.lang.Long"/>
		</constructor>
	</resultMap>

	<sql id="fragment-AuditDatumEntity-pk-result">
		<choose>
			<when test='rollups == null or rollups["All"] == null'>
				<choose>
					<when test='rollups == null or rollups["Time"] != null'>
						aud.ts_start AS aud_ts,
					</when>
					<otherwise>
						NULL::timestamptz AS aud_ts,
					</otherwise>
				</choose>
				<choose>
					<when test='rollups == null or rollups["Node"] != null'>
						meta.node_id AS aud_node_id,
					</when>
					<otherwise>
						NULL::bigint AS aud_node_id,
					</otherwise>
				</choose>
				<choose>
					<when test='rollups == null or rollups["Source"] != null'>
						meta.source_id AS aud_source_id,
					</when>
					<otherwise>
						NULL::text AS aud_source_id,
					</otherwise>
				</choose>
			</when>
			<otherwise>
				NULL::timestamptz AS aud_ts,
				NULL::bigint AS aud_node_id,
				NULL::text AS aud_source_id,
			</otherwise>
		</choose>
	</sql>
	
	<sql id="fragment-AuditDatumEntity-acc-Day-result">
		<include refid="fragment-AuditDatumEntity-pk-result"/>
		<choose>
			<when test="rollups != null">
				SUM(aud.datum_count) AS aud_datum_count,
				SUM(aud.datum_hourly_count) AS aud_datum_hourly_count,
				SUM(aud.datum_daily_count) AS aud_datum_daily_count,
				SUM(aud.datum_monthly_count) AS aud_datum_monthly_count,
			</when>
			<otherwise>
				aud.datum_count AS aud_datum_count,
				aud.datum_hourly_count AS aud_datum_hourly_count,
				aud.datum_daily_count AS aud_datum_daily_count,
				aud.datum_monthly_count AS aud_datum_monthly_count,
			</otherwise>
		</choose>
		'RunningTotal' AS aud_agg_kind,
		NULL::bigint AS aud_datum_prop_count,
		NULL::bigint AS aud_datum_query_count
	</sql>

	<sql id="fragment-AuditDatumEntity-Hour-result">
		<include refid="fragment-AuditDatumEntity-pk-result"/>
		<choose>
			<when test="rollups != null">
				SUM(aud.datum_count) AS aud_datum_count,
				SUM(aud.prop_count) AS aud_datum_prop_count,
				SUM(aud.datum_q_count) AS aud_datum_query_count,
			</when>
			<otherwise>
				aud.datum_count AS aud_datum_count,
				aud.prop_count AS aud_datum_prop_count,
				aud.datum_q_count AS aud_datum_query_count,
			</otherwise>
		</choose>
		'Hour' AS aud_agg_kind,
		NULL::bigint AS aud_datum_hourly_count,
		NULL::bigint AS aud_datum_daily_count,
		NULL::bigint AS aud_datum_monthly_count
	</sql>

	<sql id="fragment-AuditDatumEntity-Day-result">
		<include refid="fragment-AuditDatumEntity-pk-result"/>
		<choose>
			<when test="rollups != null">
				SUM(aud.datum_count) AS aud_datum_count,
				SUM(aud.datum_hourly_count) AS aud_datum_hourly_count,
				SUM(CASE aud.datum_daily_pres WHEN TRUE THEN 1 ELSE 0 END) AS aud_datum_daily_count,
				SUM(aud.prop_count) AS aud_datum_prop_count,
				SUM(aud.datum_q_count) AS aud_datum_query_count,
			</when>
			<otherwise>
				aud.datum_count AS aud_datum_count,
				aud.datum_hourly_count AS aud_datum_hourly_count,
				CASE aud.datum_daily_pres WHEN TRUE THEN 1 ELSE 0 END AS aud_datum_daily_count,
				aud.prop_count AS aud_datum_prop_count,
				aud.datum_q_count AS aud_datum_query_count,
			</otherwise>
		</choose>
		'Day' AS aud_agg_kind,
		NULL::bigint AS aud_datum_monthly_count
	</sql>

	<sql id="fragment-AuditDatumEntity-Month-result">
		<include refid="fragment-AuditDatumEntity-pk-result"/>
		<choose>
			<when test="rollups != null">
				SUM(aud.datum_count) AS aud_datum_count,
				SUM(aud.datum_hourly_count) AS aud_datum_hourly_count,
				SUM(aud.datum_daily_count) AS aud_datum_daily_count,
				SUM(CASE aud.datum_monthly_pres WHEN TRUE THEN 1 ELSE 0 END) AS aud_datum_monthly_count,
				SUM(aud.prop_count) AS aud_datum_prop_count,
				SUM(aud.datum_q_count) AS aud_datum_query_count,
			</when>
			<otherwise>
				aud.datum_count AS aud_datum_count,
				aud.datum_hourly_count AS aud_datum_hourly_count,
				aud.datum_daily_count AS aud_datum_daily_count,
				CASE aud.datum_monthly_pres WHEN TRUE THEN 1 ELSE 0 END AS aud_datum_monthly_count,
				aud.prop_count AS aud_datum_prop_count,
				aud.datum_q_count AS aud_datum_query_count,
			</otherwise>
		</choose>
		'Month' AS aud_agg_kind
	</sql>

	<sql id="fragment-findall-AuditDatumEntity-where">
		<where>
			<if test="filter.userId != null">
				AND un.user_id = #{filter.userId}
			</if>
			<if test="filter.streamIds != null and filter.streamIds.length > 0">
				AND aud.stream_id = ANY(#{filter.streamIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDArrayTypeHandler})
			</if>
			<if test="filter.nodeIds != null and filter.nodeIds.length > 0">
				AND meta.node_id = ANY(#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
				AND meta.source_id = ANY(#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
			<if test="filter.startDate != null">
				AND aud.ts_start &gt;= #{filter.startDate,javaType=java.time.Instant,jdbcType=TIMESTAMP}
			</if>
			<if test="filter.endDate != null">
				AND aud.ts_start &lt; #{filter.endDate,javaType=java.time.Instant,jdbcType=TIMESTAMP}
			</if>
		</where>
	</sql>

	<sql id="fragment-findall-AuditDatumEntity-rollup-group">
		<if test='rollups != null and rollups["All"] == null'>
			<foreach collection="rollups.keySet()" open="GROUP BY" separator="," item="rollup">
				<choose>
					<when test='rollup == "Time"'>aud.ts_start</when>
					<when test='rollup == "Node"'>meta.node_id</when>
					<when test='rollup == "Source"'>meta.source_id</when>
				</choose>
			</foreach>
		</if>
	</sql>
	
	<sql id="fragment-findall-AuditDatumEntity-order">
		<if test='rollups == null or rollups["All"] == null'>
			ORDER BY
			<choose>
				<when test="filter.mostRecent == true">
					aud_node_id, aud_source_id, aud_ts desc
				</when>
				<when test="SortDescriptors != null and SortDescriptors.size &gt; 0">
					 <foreach collection="SortDescriptors" item="item" separator=",">
						<if test='item.sortKey == "created"'>aud_ts</if>
						<if test='item.sortKey == "node"'>aud_node_id</if>
						<if test='item.sortKey == "source"'>aud_source_id</if>
						<if test='item.descending'>DESC</if>
					</foreach>
				</when>
				<otherwise>
					<trim suffixOverrides=",">
						<if test='rollups == null or rollups["Time"] != null'>
							aud_ts,
						</if>
						<if test='rollups == null or rollups["Node"] != null'>
							aud_node_id,
						</if>
						<if test='rollups == null or rollups["Source"] != null'>
							aud_source_id,
						</if>
					</trim>
				</otherwise>
			</choose>
		</if>
	</sql>
	
	<select id="find-AuditDatumEntity-for-filter" parameterType="map"
			resultMap="AuditDatumEntityRollup-FullResult" fetchSize="1000" resultSetType="FORWARD_ONLY">
		SELECT
		<choose>
			<when test='aggregation == "Hour"'>
				<include refid="fragment-AuditDatumEntity-Hour-result"/>
			</when>
			<when test='aggregation == "Month"'>
				<include refid="fragment-AuditDatumEntity-Month-result"/>
			</when>
			<otherwise>
				<include refid="fragment-AuditDatumEntity-Day-result"/>
			</otherwise>
		</choose>			
		FROM
		<choose>
			<when test='aggregation == "Hour"'>solardatm.aud_datm_hourly aud</when>
			<when test='aggregation == "Month"'>solardatm.aud_datm_monthly aud</when>
			<otherwise>solardatm.aud_datm_daily aud</otherwise>
		</choose>
		INNER JOIN solardatm.da_datm_meta meta ON meta.stream_id = aud.stream_id
		INNER JOIN solaruser.user_node un ON un.node_id = meta.node_id
		<include refid="fragment-findall-AuditDatumEntity-where"/>
		<include refid="fragment-findall-AuditDatumEntity-rollup-group"/>
		<include refid="fragment-findall-AuditDatumEntity-order"/>
	</select>

	<select id="find-AuditDatumEntity-acc-for-filter" parameterType="map"
		resultMap="AuditDatumEntityRollup-FullResult" fetchSize="1000" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-AuditDatumEntity-acc-Day-result"/>			
		FROM solardatm.aud_acc_datm_daily aud
		INNER JOIN solardatm.da_datm_meta meta ON meta.stream_id = aud.stream_id
		INNER JOIN solaruser.user_node un ON un.node_id = meta.node_id
		<include refid="fragment-findall-AuditDatumEntity-where"/>
		<include refid="fragment-findall-AuditDatumEntity-rollup-group"/>
		<include refid="fragment-findall-AuditDatumEntity-order"/>
	</select>

</mapper>
