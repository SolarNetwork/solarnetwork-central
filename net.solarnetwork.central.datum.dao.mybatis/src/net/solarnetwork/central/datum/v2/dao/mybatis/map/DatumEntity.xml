<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Thu Nov 13 07:30:21 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.v2.dao.mybatis.DatumEntity">

	<insert id="update-DatumEntity" parameterType="net.solarnetwork.central.datum.v2.dao.DatumEntity">
		INSERT INTO solardatm.da_datm (
			stream_id
			<if test="timestamp != null">, ts</if>
			<if test="received != null">, received</if>
			, data_i
			, data_a
			, data_s
			, data_t
		) VALUES (
			#{streamId,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler}
			<if test="timestamp != null">, #{timestamp}</if>
			<if test="received != null">, #{received}</if>
			, #{properties.instantaneous,typeHandler=net.solarnetwork.central.dao.mybatis.type.NumericArrayTypeHandler}
			, #{properties.accumulating,typeHandler=net.solarnetwork.central.dao.mybatis.type.NumericArrayTypeHandler}
			, #{properties.status,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
			, #{properties.tags,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
		)
		ON CONFLICT (stream_id, ts) DO UPDATE
		SET received = EXCLUDED.received,
			data_i = EXCLUDED.data_i,
			data_a = EXCLUDED.data_a,
			data_s = EXCLUDED.data_s,
			data_t = EXCLUDED.data_t
	</insert>
	
	<sql id="fragment-DatumEntity-full-result">
		datum.stream_id AS datum_stream_id,
		datum.ts AS datum_ts,
		datum.received AS datum_received,
		datum.data_i AS datum_data_i,
		datum.data_a AS datum_data_a,
		datum.data_s AS datum_data_s,
		datum.data_t AS datum_data_t
	</sql>
	
	<resultMap id="DatumEntity-FullResult" type="net.solarnetwork.central.datum.v2.dao.DatumEntity">
		<constructor>
			<idArg column="datum_stream_id" javaType="java.util.UUID" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
			<idArg column="datum_ts" javaType="java.time.Instant"/>
			<arg column="datum_received" javaType="java.time.Instant"/>
			<arg column="datum_data_i" typeHandler="net.solarnetwork.central.dao.mybatis.type.NumericArrayTypeHandler"/>
			<arg column="datum_data_a" typeHandler="net.solarnetwork.central.dao.mybatis.type.NumericArrayTypeHandler"/>
			<arg column="datum_data_s" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
			<arg column="datum_data_t" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
		</constructor>
	</resultMap>
	
	<select id="get-DatumEntity-for-id" parameterType="net.solarnetwork.central.datum.v2.domain.DatumPK" resultMap="DatumEntity-FullResult">
		SELECT
			<include refid="fragment-DatumEntity-full-result"/>
		FROM
			solardatm.da_datm datum
		WHERE
			datum.stream_id = #{streamId,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler}
			AND datum.ts = #{timestamp}
	</select>
	
	<!-- 
		Datum Stream Metadata
	 -->
	
	<sql id="fragment-DatumStreamMetadata-full-result">
		smeta.stream_id AS stream_meta_stream_id,
		smeta.names_i AS stream_meta_names_i,
		smeta.names_a AS stream_meta_names_a,
		smeta.names_s AS stream_meta_names_s
	</sql>
	
	<!-- Node Datum Stream Metadata -->
	
	<sql id="fragment-NodeDatumStreamMetadata-full-result">
		<include refid="fragment-DatumStreamMetadata-full-result"/>,
		smeta.node_id AS stream_meta_node_id,
		smeta.source_id AS stream_meta_source_id
	</sql>
	
	<resultMap id="NodeDatumStreamMetadata-FullResult" type="net.solarnetwork.central.datum.v2.domain.BasicNodeDatumStreamMetadata">
		<constructor>
			<idArg column="stream_meta_stream_id" javaType="java.util.UUID" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
			<arg column="stream_meta_node_id" javaType="Long"/>
			<arg column="stream_meta_source_id" javaType="String"/>
			<arg column="stream_meta_names_i" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
			<arg column="stream_meta_names_a" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
			<arg column="stream_meta_names_s" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
		</constructor>
	</resultMap>

	<select id="find-NodeDatumStreamMetadata-for-filter" parameterType="map" resultMap="NodeDatumStreamMetadata-FullResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-NodeDatumStreamMetadata-full-result"/>
		FROM
			solardatm.da_datm_meta smeta
		<where>
			<if test="filter.nodeIds != null and filter.nodeIds.length > 0">
				AND smeta.node_id = ANY(#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
				AND smeta.source_id = ANY(#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
			<if test="filter.streamIds != null and filter.streamIds.length > 0">
				AND smeta.stream_id = ANY(#{filter.streamIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDArrayTypeHandler})
			</if>
		</where>
	</select>
	
	<!-- Location Datum Stream Metadata -->
	
	<sql id="fragment-LocationDatumStreamMetadata-full-result">
		<include refid="fragment-DatumStreamMetadata-full-result"/>,
		smeta.loc_id AS stream_meta_loc_id,
		smeta.source_id AS stream_meta_source_id
	</sql>
	
	<resultMap id="LocationDatumStreamMetadata-FullResult" type="net.solarnetwork.central.datum.v2.domain.BasicLocationDatumStreamMetadata">
		<constructor>
			<idArg column="stream_meta_stream_id" javaType="java.util.UUID" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
			<arg column="stream_meta_loc_id" javaType="Long"/>
			<arg column="stream_meta_source_id" javaType="String"/>
			<arg column="stream_meta_names_i" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
			<arg column="stream_meta_names_a" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
			<arg column="stream_meta_names_s" typeHandler="net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler"/>
		</constructor>
	</resultMap>

	<select id="find-LocationDatumStreamMetadata-for-filter" parameterType="map" resultMap="LocationDatumStreamMetadata-FullResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-LocationDatumStreamMetadata-full-result"/>
		FROM
			solardatm.da_loc_datm_meta smeta
		<where>
			<if test="filter.locationIds != null and filter.locationIds.length > 0">
				AND smeta.loc_id = ANY(#{filter.locationIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
				AND smeta.source_id = ANY(#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
			<if test="filter.streamIds != null and filter.streamIds.length > 0">
				AND smeta.stream_id = ANY(#{filter.streamIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDArrayTypeHandler})
			</if>
		</where>
	</select>
	
	<sql id="fragment-findall-DatumEntity-DatumEntity-from">
		FROM solardatm.da_datm datum
		<if test="filter.streamIds == null or filter.streamIds.length &lt; 1">
			<choose>
				<when test="filter.nodeIds != null and filter.nodeIds.length &gt; 0">
					INNER JOIN solardatm.da_datm_meta smeta ON smeta.stream_id = datum.stream_id
				</when>
				<when test="filter.locationIds != null and filter.locationIds.length &gt; 0">
					INNER JOIN solardatm.da_loc_datm_meta smeta ON smeta.stream_id = datum.stream_id
				</when>
			</choose>
		</if>
	</sql>
	
	<sql id="fragment-findall-DatumEntity-DatumEntity-where">
		<where>
			<choose>
				<when test="filter.streamIds != null and filter.streamIds.length &gt; 0">
					AND datum.stream_id = ANY(#{filter.streamIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDArrayTypeHandler})
				</when>
				<otherwise>
					<choose>
						<when test="filter.nodeIds != null and filter.nodeIds.length &gt; 0">
							AND smeta.node_id = ANY(#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
						</when>
						<when test="filter.locationIds != null and filter.locationIds.length &gt; 0">
							AND smeta.loc_id = ANY(#{filter.locationIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
						</when>
					</choose>
				</otherwise>
			</choose>
			<if test="filter.startDate != null">
				AND datum.ts &gt;= #{filter.startDate,javaType=java.time.Instant,jdbcType=TIMESTAMP}
			</if>
			<if test="filter.endDate != null">
				AND datum.ts &lt; #{filter.endDate,javaType=java.time.Instant,jdbcType=TIMESTAMP}
			</if>
		</where>
	</sql>
	
	<select id="findall-DatumEntity-DatumEntity" parameterType="map" resultMap="DatumEntity-FullResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-DatumEntity-full-result"/>
		<include refid="fragment-findall-DatumEntity-DatumEntity-from"/>
		<include refid="fragment-findall-DatumEntity-DatumEntity-where"/>
		ORDER BY
		<choose>
			<when test="SortDescriptors != null and SortDescriptors.size &gt; 0">
				 <foreach collection="SortDescriptors" item="item" separator=",">
					<if test="item.sortKey == &quot;ts&quot;">datum.ts</if>
					<if test="item.sortKey == &quot;node&quot;">smeta.node_id</if>
					<if test="item.sortKey == &quot;location&quot;">smeta.loc_id</if>
					<if test="item.sortKey == &quot;source&quot;">smeta.source_id</if>
					<if test="item.descending">DESC</if>
				</foreach>
			</when>
			<otherwise>
				datum.stream_id,
				datum.ts
			</otherwise>
		</choose>
	</select>

</mapper>
