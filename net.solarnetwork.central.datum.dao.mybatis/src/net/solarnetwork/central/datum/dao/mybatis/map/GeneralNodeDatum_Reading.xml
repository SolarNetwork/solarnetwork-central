<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatum">

	<select id="find-general-reporting-diff-within" resultMap="ReportingGeneralNodeDatumDirectResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			ts_start,
			ts_start AT TIME ZONE time_zone AS local_date,
			node_id,
			source_id,
			solarcommon.jdata_from_components(NULL, jdata_a, jsonb_build_object(
				'timeZone', time_zone,
				'endDate', to_char(ts_end at time zone 'UTC', 'YYYY-MM-DD HH24:MI:SS.MS"Z"'),
				'localEndDate', to_char(ts_end AT TIME ZONE time_zone, 'YYYY-MM-DD HH24:MI:SS.MS')), NULL) AS jdata
		FROM <choose>
				<when test="tolerance != null">solardatum.calculate_datum_diff</when>
				<otherwise>solardatum.calculate_datum_diff_over</otherwise>
			</choose>(
				#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
				, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
				, #{start,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
				, #{end,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			<if test="tolerance != null">
				, #{tolerance,javaType=org.joda.time.Period}::interval
			</if>
			)
		ORDER BY node_id, source_id
	</select>

	<select id="find-general-reporting-diff-within-local" resultMap="ReportingGeneralNodeDatumDirectResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			ts_start,
			ts_start AT TIME ZONE time_zone AS local_date,
			node_id,
			source_id,
			solarcommon.jdata_from_components(NULL, jdata_a, jsonb_build_object(
				'timeZone', time_zone,
				'endDate', to_char(ts_end at time zone 'UTC', 'YYYY-MM-DD HH24:MI:SS.MS"Z"'),
				'localEndDate', to_char(ts_end AT TIME ZONE time_zone, 'YYYY-MM-DD HH24:MI:SS.MS')), NULL) AS jdata
		FROM <choose>
				<when test="tolerance != null">solardatum.calculate_datum_diff_local</when>
				<otherwise>solardatum.calculate_datum_diff_over_local</otherwise>
			</choose>(
				#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
				, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
				, #{start,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
				, #{end,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
			<if test="tolerance != null">
				, #{tolerance,javaType=org.joda.time.Period}::interval
			</if>
			)
		ORDER BY node_id, source_id
	</select>

	<sql id="fragment-general-reading-GeneralNodeDatum-aggregation-result">
		datum.ts_start AS r_datum_ts_start,
		<choose>
			<when test="combine != null">
				min(datum.local_date) AS r_datum_local_date,
				<choose>
					<when test="combine.withNodeIds">
						node_mappings.vid AS r_datum_node_id,
					</when>
					<otherwise>
						datum.node_id AS r_datum_node_id,
					</otherwise>
				</choose>
				<choose>
					<when test="combine.withSourceIds">
						source_mappings.vid AS r_datum_source_id,
					</when>
					<otherwise>
						datum.source_id AS r_datum_source_id,
					</otherwise>
				</choose>
				<choose>
					<when test="combine.type == 'Average'">
						solarcommon.jdata_from_components(
							solarcommon.jsonb_avg_object(datum.jdata_i),
							solarcommon.jsonb_avg_object(datum.jdata_ad),
							NULL,
							NULL) AS r_datum_jdata
					</when>
					<otherwise>
						<!--  sum -->
						solarcommon.jdata_from_components(
							solarcommon.jsonb_sum_object(datum.jdata_i),
							solarcommon.jsonb_sum_object(datum.jdata_ad),
							NULL,
							NULL) AS r_datum_jdata
					</otherwise>
				</choose>
			</when>
			<otherwise>
				datum.local_date AS r_datum_local_date,
				datum.node_id AS r_datum_node_id,
				datum.source_id AS r_datum_source_id,
				solarcommon.jdata_from_components(datum.jdata_i, datum.jdata_ad, datum.jdata_s, datum.jdata_t) AS r_datum_jdata,
				solarcommon.jdata_from_components(NULL, datum.jdata_as, NULL, NULL) AS r_datum_jdata_start,
				solarcommon.jdata_from_components(NULL, datum.jdata_af, NULL, NULL) AS r_datum_jdata_final
			</otherwise>
		</choose>
	</sql>

	<resultMap id="ReportingGeneralNodeDatumReadingMatchResult" type="net.solarnetwork.central.datum.domain.ReportingGeneralNodeDatumReading" extends="ReportingGeneralNodeDatumMatchResult">
		<result property="sampleJsonStart" column="r_datum_jdata_start"/>
		<result property="sampleJsonFinal" column="r_datum_jdata_final"/>
	</resultMap>
	
	<select id="findall-general-reading-Difference-ReportingGeneralNodeDatum-Hour-count" resultType="long">
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-cte"/>
		SELECT count(datum.ts_start)
		FROM 
			<choose>
				<when test="filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0">
					solarnet.node_source_time_ranges_local(
						#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
						, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
						, #{filter.localStartDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
						, #{filter.localEndDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
					) tz
					INNER JOIN solaragg.agg_datum_hourly datum 
						ON datum.node_id = ANY(tz.node_ids) 
						<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
						AND datum.source_id = ANY(tz.source_ids)
						</if>
						AND datum.ts_start &gt;= tz.ts_start
						AND datum.ts_start &lt; tz.ts_end
				</when>
				<otherwise>
					solaragg.agg_datum_hourly datum
				</otherwise>
			</choose>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-join"/>
		<if test="!(filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0)">
			<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		</if>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-group"/>
	</select>
	
	<select id="findall-general-reading-Difference-ReportingGeneralNodeDatum-Hour" resultMap="ReportingGeneralNodeDatumReadingMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-cte"/>
		SELECT
			<include refid="fragment-general-reading-GeneralNodeDatum-aggregation-result"/>
		FROM 
			<choose>
				<when test="filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0">
					solarnet.node_source_time_ranges_local(
						#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
						, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
						, #{filter.localStartDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
						, #{filter.localEndDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
					) tz
					INNER JOIN solaragg.agg_datum_hourly datum 
						ON datum.node_id = ANY(tz.node_ids) 
						<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
						AND datum.source_id = ANY(tz.source_ids)
						</if>
						AND datum.ts_start &gt;= tz.ts_start
						AND datum.ts_start &lt; tz.ts_end
				</when>
				<otherwise>
					solaragg.agg_datum_hourly datum
				</otherwise>
			</choose>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-join"/>
		<if test="!(filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0)">
			<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		</if>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-group"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<select id="findall-general-reading-Difference-ReportingGeneralNodeDatum-Day-count" resultType="long">
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-cte"/>
		SELECT count(datum.ts_start)
		FROM 
			<choose>
				<when test="filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0">
					solarnet.node_source_time_ranges_local(
						#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
						, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
						, #{filter.localStartDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
						, #{filter.localEndDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
					) tz
					INNER JOIN solaragg.agg_datum_daily datum 
						ON datum.node_id = ANY(tz.node_ids) 
						<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
						AND datum.source_id = ANY(tz.source_ids)
						</if>
						AND datum.ts_start &gt;= tz.ts_start
						AND datum.ts_start &lt; tz.ts_end
				</when>
				<otherwise>
					solaragg.agg_datum_daily datum
				</otherwise>
			</choose>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-join"/>
		<if test="!(filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0)">
			<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		</if>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-group"/>
	</select>
	
	<select id="findall-general-reading-Difference-ReportingGeneralNodeDatum-Day" resultMap="ReportingGeneralNodeDatumReadingMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-cte"/>
		SELECT
			<include refid="fragment-general-reading-GeneralNodeDatum-aggregation-result"/>
		FROM 
			<choose>
				<when test="filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0">
					solarnet.node_source_time_ranges_local(
						#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
						, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
						, #{filter.localStartDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
						, #{filter.localEndDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
					) tz
					INNER JOIN solaragg.agg_datum_daily datum 
						ON datum.node_id = ANY(tz.node_ids) 
						<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
						AND datum.source_id = ANY(tz.source_ids)
						</if>
						AND datum.ts_start &gt;= tz.ts_start
						AND datum.ts_start &lt; tz.ts_end
				</when>
				<otherwise>
					solaragg.agg_datum_daily datum
				</otherwise>
			</choose>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-join"/>
		<if test="!(filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0)">
			<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		</if>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-group"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<select id="findall-general-reading-Difference-ReportingGeneralNodeDatum-Month-count" resultType="long">
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-cte"/>
		SELECT count(datum.ts_start)
		FROM 
			<choose>
				<when test="filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0">
					solarnet.node_source_time_ranges_local(
						#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
						, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
						, #{filter.localStartDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
						, #{filter.localEndDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
					) tz
					INNER JOIN solaragg.agg_datum_monthly datum 
						ON datum.node_id = ANY(tz.node_ids) 
						<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
						AND datum.source_id = ANY(tz.source_ids)
						</if>
						AND datum.ts_start &gt;= tz.ts_start
						AND datum.ts_start &lt; tz.ts_end
				</when>
				<otherwise>
					solaragg.agg_datum_monthly datum
				</otherwise>
			</choose>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-join"/>
		<if test="!(filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0)">
			<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		</if>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-group"/>
	</select>
	
	<select id="findall-general-reading-Difference-ReportingGeneralNodeDatum-Month" resultMap="ReportingGeneralNodeDatumReadingMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-cte"/>
		SELECT
			<include refid="fragment-general-reading-GeneralNodeDatum-aggregation-result"/>
		FROM 
			<choose>
				<when test="filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0">
					solarnet.node_source_time_ranges_local(
						#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}::bigint[]
						, #{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
						, #{filter.localStartDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
						, #{filter.localEndDate,typeHandler=net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler,jdbcType=TIMESTAMP}::timestamp
					) tz
					INNER JOIN solaragg.agg_datum_monthly datum 
						ON datum.node_id = ANY(tz.node_ids) 
						<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
						AND datum.source_id = ANY(tz.source_ids)
						</if>
						AND datum.ts_start &gt;= tz.ts_start
						AND datum.ts_start &lt; tz.ts_end
				</when>
				<otherwise>
					solaragg.agg_datum_monthly datum
				</otherwise>
			</choose>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-join"/>
		<if test="!(filter.localStartDate != null and filter.localEndDate != null and filter.nodeIds != null and filter.nodeIds.length > 0)">
			<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		</if>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-combine-group"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

</mapper>
