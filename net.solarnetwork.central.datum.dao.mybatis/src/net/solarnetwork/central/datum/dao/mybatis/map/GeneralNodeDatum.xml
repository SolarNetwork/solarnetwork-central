<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Thu Nov 13 07:30:21 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatum">

	<parameterMap id="pmap-GeneralNodeDatum" type="GeneralNodeDatum">
		<parameter property="created" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="nodeId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="sourceId" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="posted" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="sampleJson" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<update id="insert-GeneralNodeDatum" parameterMap="pmap-GeneralNodeDatum" statementType="CALLABLE">
		{call solardatum.store_datum(?, ?, ?, ?, ?)}
	</update>
	
	<update id="update-GeneralNodeDatum" parameterMap="pmap-GeneralNodeDatum" statementType="CALLABLE">
		{call solardatum.store_datum(?, ?, ?, ?, ?)}
	</update>
	
	<sql id="fragment-GeneralNodeDatum-full-result">
		datum.node_id AS datum_node_id,
		datum.ts AS datum_ts,
		datum.source_id AS datum_source_id,
		datum.posted AS datum_posted,
		datum.jdata AS datum_jdata,
		datum.local_date AS datum_local_date
	</sql>
	
	<resultMap id="GeneralNodeDatumFullResult" type="GeneralNodeDatum">
		<id property="nodeId" column="datum_node_id"/>
		<id property="created" column="datum_ts"/>
		<id property="sourceId" column="datum_source_id"/>
		<result property="posted" column="datum_posted"/>
		<result property="sampleJson" column="datum_jdata"/>
	</resultMap>
	
	<resultMap id="GeneralNodeDatumDirectResult" type="GeneralNodeDatum">
		<id property="nodeId" column="node_id"/>
		<id property="created" column="ts"/>
		<id property="sourceId" column="source_id"/>
		<result property="posted" column="posted"/>
		<result property="sampleJson" column="jdata"/>
	</resultMap>
	
	<select id="get-GeneralNodeDatum-for-id" parameterType="GeneralNodeDatumPK" resultMap="GeneralNodeDatumFullResult">
		SELECT
			<include refid="fragment-GeneralNodeDatum-full-result"/>
		FROM
			solardatum.da_datum_data datum
		WHERE
			datum.node_id = #{nodeId}
			AND datum.ts = #{created}
			AND datum.source_id = #{sourceId}
	</select>

	<select id="find-general-distinct-sources" parameterType="net.solarnetwork.central.datum.domain.GeneralNodeDatumFilter" resultType="string" statementType="CALLABLE">
		<choose>
			<when test="startDate != null and endDate != null">
				{call solaragg.find_available_sources(
					#{nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}
					, #{startDate,jdbcType=TIMESTAMP}
					, #{endDate,jdbcType=TIMESTAMP}
				)}
			</when>
			<when test="startDate != null">
				{call solaragg.find_available_sources_since(
					#{nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}
					, #{startDate,jdbcType=TIMESTAMP}
				)}
			</when>
			<when test="endDate != null">
				{call solaragg.find_available_sources_before(
					#{nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}
					, #{endDate,jdbcType=TIMESTAMP}
				)}
			</when>
			<otherwise>
				{call solaragg.find_available_sources(
					#{nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}
				)}
			</otherwise>
		</choose>
	</select>
	
	<parameterMap id="pmap-reportable-interval" type="map">
		<parameter property="node" jdbcType="BIGINT" mode="IN"/>
		<parameter property="source" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="ts_start" jdbcType="TIMESTAMP" mode="OUT"/>
		<parameter property="ts_end" jdbcType="TIMESTAMP" mode="OUT"/>
		<parameter property="node_tz" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="node_tz_offset" jdbcType="INTEGER" mode="OUT"/>
	</parameterMap>

	<update id="find-general-reportable-interval" parameterMap="pmap-reportable-interval" statementType="CALLABLE">
		{call solardatum.find_reportable_interval(?, ?, ?, ?, ?, ?)}
	</update>

	<!-- 
		FilterableDao support 
	-->

	<resultMap id="GeneralNodeDatumMatchResult" type="ReportingGeneralNodeDatum" extends="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatum.GeneralNodeDatumFullResult">
		<result property="localDateTime" column="datum_local_date" typeHandler="net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler"/>
	</resultMap>
	<resultMap id="GeneralNodeDatumDirectMatchResult" type="GeneralNodeDatumMatch" extends="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatum.GeneralNodeDatumDirectResult">
		<result property="localDateTime" column="local_date" typeHandler="net.solarnetwork.central.dao.mybatis.type.JodaLocalDateTimeTypeHandler"/>
	</resultMap>

	<select id="find-general-most-recent" resultMap="GeneralNodeDatumDirectMatchResult" statementType="CALLABLE">
		<choose>
			<when test="filter.userIds != null">
				{call solaruser.find_most_recent_datum_for_user(
					#{filter.userIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}
				)}
			</when>
			<when test="filter.nodeIds.length > 1 and filter.sourceId == null">
				{call solardatum.find_most_recent(
					#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler}
				)}
			</when>
			<otherwise>
				{call solardatum.find_most_recent(
					#{filter.nodeId,jdbcType=BIGINT}, 
					#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
				)}
			</otherwise>
		</choose>
	</select>

	<sql id="fragment-findall-GeneralNodeDatum-GeneralNodeDatumMatch-where">
		<where>
			<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
				AND datum.source_id IN
				<foreach collection="filter.sourceIds" open="(" close=")" separator="," item="source">
					#{source,javaType=string,jdbcType=VARCHAR}
				</foreach>
			</if>
			<if test="filter.nodeIds != null and filter.nodeIds.length > 0">
				AND datum.node_id IN
				<foreach collection="filter.nodeIds" open="(" close=")" separator="," item="node">
					#{node,javaType=long,jdbcType=BIGINT}
				</foreach>
			</if>
			<if test="filter.startDate != null">
				AND datum.ts &gt;= #{filter.startDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			</if>
			<if test="filter.endDate != null">
				AND datum.ts &lt; #{filter.endDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			</if>
		</where>
	</sql>


	<select id="findall-GeneralNodeDatum-GeneralNodeDatumMatch" resultMap="GeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-full-result"/>
			, datum.ts AT TIME ZONE COALESCE(loc.time_zone, 'UTC') AS datum_local_date
		FROM
			solardatum.da_datum_data datum
		LEFT OUTER JOIN solarnet.sn_node node ON node.node_id = datum.node_id
		LEFT OUTER JOIN solarnet.sn_loc loc ON loc.id = node.loc_id
		<include refid="fragment-findall-GeneralNodeDatum-GeneralNodeDatumMatch-where"/>
		ORDER BY
		<choose>
			<when test="SortDescriptors != null and SortDescriptors.size &gt; 0">
				 <foreach collection="SortDescriptors" item="item" separator=",">
					<if test="item.sortKey == &quot;created&quot;">datum.ts</if>
					<if test="item.sortKey == &quot;node&quot;">datum.node_id</if>
					<if test="item.sortKey == &quot;source&quot;">datum.source_id</if>
					<if test="item.descending">DESC</if>
				</foreach>
			</when>
			<otherwise>
				datum.node_id,
				datum.ts,
				datum.source_id
			</otherwise>
		</choose>
	</select>

	<select id="findall-GeneralNodeDatum-GeneralNodeDatumMatch-count" resultType="long">
		SELECT count(datum.ts)
		FROM
			solardatum.da_datum_data datum
		<include refid="fragment-findall-GeneralNodeDatum-GeneralNodeDatumMatch-where"/>
	</select>
	
	<!-- Audit support -->
	
	<update id="find-general-audit-interval" parameterMap="pmap-reportable-interval" statementType="CALLABLE">
		{call solaragg.find_audit_datum_interval(?, ?, ?, ?, ?, ?)}
	</update>

	<select id="find-general-audit-hourly-prop-count" resultType="long">
		SELECT SUM(CAST(aud.prop_count AS BIGINT))
		FROM solaragg.aud_datum_hourly aud
		<where>
			<if test="nodeIds != null and nodeIds.length > 0">
				AND aud.node_id IN
				<foreach collection="nodeIds" open="(" close=")" separator="," item="node">
					#{node,javaType=long,jdbcType=BIGINT}
				</foreach>
			</if>
			<if test="sourceIds != null and sourceIds.length > 0">
				AND aud.source_id IN
				<foreach collection="sourceIds" open="(" close=")" separator="," item="source">
					#{source,javaType=string,jdbcType=VARCHAR}
				</foreach>
			</if>
			<if test="startDate != null">
				AND aud.ts_start &gt;= #{startDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			</if>
			<if test="endDate != null">
				AND aud.ts_start &lt; #{endDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			</if>
		</where>
	</select>
	
	<!-- Aggregated query support -->

	<resultMap id="ReportingGeneralNodeDatumMatchResult" type="ReportingGeneralNodeDatum">
		<id property="nodeId" column="r_datum_node_id"/>
		<id property="created" column="r_datum_ts_start"/>
		<id property="sourceId" column="r_datum_source_id"/>
		<result property="localDateTime" column="r_datum_local_date"/>
		<result property="sampleJson" column="r_datum_jdata"/>
	</resultMap>

	<resultMap id="ReportingGeneralNodeDatumDirectResult" type="ReportingGeneralNodeDatum">
		<id property="nodeId" column="node_id"/>
		<id property="created" column="ts_start"/>
		<id property="sourceId" column="source_id"/>
		<result property="localDateTime" column="local_date"/>
		<result property="sampleJson" column="jdata"/>
	</resultMap>

	<sql id="fragment-GeneralNodeDatum-aggregation-result">
		datum.node_id AS r_datum_node_id,
		datum.ts_start AS r_datum_ts_start,
		datum.local_date AS r_datum_local_date,
		datum.source_id AS r_datum_source_id,
		datum.jdata AS r_datum_jdata
	</sql>

	<select id="find-general-reporting-most-recent" resultMap="ReportingGeneralNodeDatumDirectResult" statementType="CALLABLE">
		<choose>
			<when test="aggregation == 'Hour'">
				{call solaragg.find_most_recent_hourly(
					#{filter.nodeId,jdbcType=BIGINT}, 
					#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
				)}
			</when>
			<when test="aggregation == 'Day'">
				{call solaragg.find_most_recent_daily(
					#{filter.nodeId,jdbcType=BIGINT}, 
					#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
				)}
			</when>
			<otherwise>
				{call solaragg.find_most_recent_monthly(
					#{filter.nodeId,jdbcType=BIGINT}, 
					#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
				)}
			</otherwise>
		</choose>
	</select>

	<sql id="fragment-findall-ReportingGeneralNodeDatum-where">
		<where>
			<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
				AND datum.source_id IN
				<foreach collection="filter.sourceIds" open="(" close=")" separator="," item="source">
					#{source,javaType=string,jdbcType=VARCHAR}
				</foreach>
			</if>
			<if test="filter.nodeIds != null and filter.nodeIds.length > 0">
				AND datum.node_id IN
				<foreach collection="filter.nodeIds" open="(" close=")" separator="," item="node">
					#{node,javaType=long,jdbcType=BIGINT}
				</foreach>
			</if>
			<if test="filter.startDate != null">
				AND datum.ts_start &gt;= #{filter.startDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			</if>
			<if test="filter.endDate != null">
				AND datum.ts_start &lt; #{filter.endDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
			</if>
		</where>
	</sql>
	
	<sql id="fragment-findall-ReportingGeneralNodeDatum-order">
		ORDER BY
		<choose>
			<when test="SortDescriptors != null and SortDescriptors.size &gt; 0">
				 <foreach collection="SortDescriptors" item="item" separator=",">
					<if test="item.sortKey == &quot;created&quot;">r_datum_ts_start</if>
					<if test="item.sortKey == &quot;node&quot;">r_datum_node_id</if>
					<if test="item.sortKey == &quot;source&quot;">r_datum_source_id</if>
					<if test="item.descending">DESC</if>
				</foreach>
			</when>
			<otherwise>
				r_datum_ts_start, r_datum_node_id, r_datum_source_id
			</otherwise>
		</choose>
	</sql>

	<sql id="fragment-findall-ReportingGeneralNodeDatum-minuteagg-where">
		solaragg.find_agg_datum_minute(
			#{filter.nodeId,jdbcType=BIGINT},
			#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler},
			#{start,jdbcType=TIMESTAMP}::timestamptz,
			#{end,jdbcType=TIMESTAMP}::timestamptz,
			#{filter.aggregation.level}
		) AS datum
	</sql>

	<sql id="fragment-findall-ReportingGeneralNodeDatum-agg-where">
		#{filter.nodeId,jdbcType=BIGINT},
		#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
		<if test="filter.dataPathElements != null">
			,#{filter.dataPathElements,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler}
		</if>
		<if test="filter != null and filter.startDate != null and filter.endDate != null">
			,#{filter.startDate,jdbcType=TIMESTAMP}::timestamptz
			,#{filter.endDate,jdbcType=TIMESTAMP}::timestamptz
		</if>
	</sql>

	<!-- Aggregated query: Minute -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Minute" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
		<include refid="fragment-findall-ReportingGeneralNodeDatum-minuteagg-where"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: hour -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Hour-count" resultType="long">
		SELECT count(datum.ts_start)
		FROM
			solaragg.agg_datum_hourly_data datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
	</select>
	
	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Hour" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.agg_datum_hourly_data datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: hour of day -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-HourOfDay" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_datum_hod(
				<include refid="fragment-findall-ReportingGeneralNodeDatum-agg-where"/>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: seasonal hour of day -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-SeasonalHourOfDay" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_datum_seasonal_hod(
				<include refid="fragment-findall-ReportingGeneralNodeDatum-agg-where"/>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: day -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Day-count" resultType="long">
		SELECT count(datum.ts_start)
		FROM
			solaragg.agg_datum_daily_data datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
	</select>
	
	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Day" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.agg_datum_daily_data datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: day of week -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-DayOfWeek" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_datum_dow(
				<include refid="fragment-findall-ReportingGeneralNodeDatum-agg-where"/>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: seasonal day of week -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-SeasonalDayOfWeek" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_datum_seasonal_dow(
				<include refid="fragment-findall-ReportingGeneralNodeDatum-agg-where"/>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: month -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Month-count" resultType="long">
		SELECT count(datum.ts_start)
		FROM
			solaragg.agg_datum_monthly_data datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
	</select>
	
	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-Month" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.agg_datum_monthly_data datum
		<include refid="fragment-findall-ReportingGeneralNodeDatum-where"/>
		<include refid="fragment-findall-ReportingGeneralNodeDatum-order"/>
	</select>

	<!-- Aggregated query: RunningTotal -->

	<select id="findall-GeneralNodeDatum-ReportingGeneralNodeDatum-RunningTotal" resultMap="ReportingGeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-aggregation-result"/>
		FROM
			solaragg.calc_running_datum_total(
				<include refid="fragment-findall-ReportingGeneralNodeDatum-agg-where"/>
			) AS datum
	</select>

</mapper>