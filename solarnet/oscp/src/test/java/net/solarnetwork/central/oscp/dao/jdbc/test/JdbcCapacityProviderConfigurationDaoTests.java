/* ==================================================================
 * JdbcCapacityProviderConfigurationDaoTests.java - 12/08/2022 6:33:46 pm
 * 
 * Copyright 2022 SolarNetwork.net Dev Team
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.central.oscp.dao.jdbc.test;

import static java.util.UUID.randomUUID;
import static net.solarnetwork.codec.JsonUtils.getStringMap;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasEntry;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import net.solarnetwork.central.domain.UserLongPK;
import net.solarnetwork.central.oscp.dao.jdbc.JdbcCapacityProviderConfigurationDao;
import net.solarnetwork.central.oscp.domain.CapacityProviderConfiguration;
import net.solarnetwork.central.oscp.domain.RegistrationStatus;
import net.solarnetwork.central.test.AbstractJUnit5JdbcDaoTestSupport;
import net.solarnetwork.central.test.CommonDbTestUtils;

/**
 * Test cases for the {@link JdbcCapacityProviderConfigurationDao} class.
 * 
 * @author matt
 * @version 1.0
 */
public class JdbcCapacityProviderConfigurationDaoTests extends AbstractJUnit5JdbcDaoTestSupport {

	private JdbcCapacityProviderConfigurationDao dao;
	private Long userId;

	@BeforeEach
	public void setup() {
		dao = new JdbcCapacityProviderConfigurationDao(jdbcTemplate);
		userId = CommonDbTestUtils.insertUser(jdbcTemplate);
	}

	private List<Map<String, Object>> allCapacityProviderConfigurationData() {
		List<Map<String, Object>> data = jdbcTemplate
				.queryForList("select * from solaruser.user_oscp_cp_conf ORDER BY user_id, id");
		log.debug("solaruser.user_oscp_cp_conf table has {} items: [{}]", data.size(),
				data.stream().map(Object::toString).collect(Collectors.joining("\n\t", "\n\t", "\n")));
		return data;
	}

	@Test
	public void insert() {
		// GIVEN
		CapacityProviderConfiguration conf = new CapacityProviderConfiguration(
				UserLongPK.unassignedEntityIdKey(userId), Instant.now());
		conf.setBaseUrl("http://example.com/" + randomUUID().toString());
		conf.setEnabled(true);
		conf.setName(randomUUID().toString());
		conf.setRegistrationStatus(RegistrationStatus.Registered);
		conf.setServiceProps(Collections.singletonMap("foo", randomUUID().toString()));
		conf.setToken(randomUUID().toString());

		// WHEN
		dao.create(userId, conf);

		// THEN
		List<Map<String, Object>> data = allCapacityProviderConfigurationData();
		assertThat("Table has 1 row", data, hasSize(1));
		Map<String, Object> row = data.get(0);
		assertThat("Row ID has been generated by DB", row,
				hasEntry(equalTo("id"), allOf(notNullValue(), not(equalTo(conf.getEntityId())))));
		assertThat("Row creation date", row, hasEntry("created", Timestamp.from(conf.getCreated())));
		assertThat("Row modification date is creation date", row,
				hasEntry("modified", Timestamp.from(conf.getCreated())));
		assertThat("Row user ID matches", row, hasEntry("user_id", conf.getUserId()));
		assertThat("Row enabled matches", row, hasEntry("enabled", conf.isEnabled()));
		assertThat("Row reg status matches", row,
				hasEntry("reg_status", conf.getRegistrationStatus().getCode()));
		assertThat("Row name matches", row, hasEntry("cname", conf.getName()));
		assertThat("Row token matches", row, hasEntry("token", conf.getToken()));
		assertThat("Row baseUrl matches", row, hasEntry("url", conf.getBaseUrl()));
		assertThat("Row serviceProps matches", getStringMap(row.get("sprops").toString()),
				is(equalTo(conf.getServiceProps())));
	}

}
