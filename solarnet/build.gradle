buildscript {
	repositories {
		mavenCentral()
		maven { url = "https://plugins.gradle.org/m2/" }
	}
}

plugins {
	id 'net.ltgt.errorprone' version '4.2.0' apply false
}

ext {
	ossrhUsername = 'ossrh-username'
	ossrhPassword = 'ossrh-password'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'net.ltgt.errorprone'

	group = "net.solarnetwork.central"

	java {
		toolchain {
	        languageVersion = JavaLanguageVersion.of(21)
	    }
		withJavadocJar()
		withSourcesJar()
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	[
		compileJava,
		compileTestJava
	].each() {
    	it.options.release = 21
		it.options.compilerArgs += [
			"-Xlint:all",
			"-Xlint:-options",
			"-Xlint:-path",
			"-Xlint:-serial",
			"-Xlint:-this-escape",
			"-Xlint:-try",
			"-parameters"
		]
		it.options.encoding = "UTF-8"
		if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
			it.options.compilerArgs += ["-Werror"]
		}
		it.options.errorprone.disable("InlineMeSuggester")
	}
	
	compileJava {
		it.options.errorprone.enabled = !(rootProject.hasProperty('errorProneDisabled') && rootProject.errorProneDisabled.toBoolean());
	}

	compileTestJava {
		options.compilerArgs += [
			"-Xlint:-serial",
            "-Xlint:-static",
			"-Xlint:-this-escape"
		]
		options.errorprone.disable("BadImport", "CheckReturnValue")
		it.options.errorprone.enabled = (rootProject.hasProperty('errorProneEnabledTest') && rootProject.errorProneEnabledTest.toBoolean());
	}

	jar.manifest {
		attributes('Implementation-Title': name,
		'Implementation-Version': version,
		'Built-By': System.getProperty('user.name'),
		'Built-JDK': System.getProperty('java.version'))
	}

	javadoc.options {
		encoding = 'UTF-8'
		use = true
		links = ['https://docs.oracle.com/en/java/javase/21/docs/api/']
		source = "21"
	}

	ext {
		awsSdk2Version = '2.31.48'
		batikVersion = '1.19'
		bucket4jVersion = '8.14.0'
		checkstyleVersion = '8.34'
		commonsIoVersion = '2.19.0'
		cronUtilsVersion = '9.2.0'
		jsonSchemaValidatorVersion = '1.3.2'
		jsoupVersion = '1.18.3'
		myBatisStarterVersion = '3.0.4'
		okhttp3Mockwebserver = '4.12.0'
		saxonVersion = '12.5'
		snCommonVersion = '4.0.0'
		snCommonExprSpelVersion = '4.1.0'
		snCommonMqttVersion = '5.0.0'
		snCommonMqttNettyVersion = '5.0.0'
		snCommonOcppVersion = '5.0.0'
		snCommonOcpp16JakartaVersion = '5.0.0'
		snCommonOcpp201Version = '2.0.0'
		snCommonOcppWebJakartaVersion = '3.3.0'
		snCommonPkiBcVersion = '4.0.0'
		snCommonWebJakartaVersion = '2.1.1'
		snExternalOcpp16JakartaVersion = '1.0.1'
		snExternalOcpp201Version = '1.0.0'
		springdocStarterVersion = '2.8.8'
		superCsvVersion = '2.4.0'
		swaggerVersion = '2.2.32'
		threetenExtraVersion = '1.8.0'
		uuidGeneratorVersion = '5.1.0'
		xzVersion = '1.10'

		libraries = [
			batik: [
				"org.jsoup:jsoup:${jsoupVersion}",
				"org.apache.xmlgraphics:batik-transcoder:${batikVersion}",
				"org.apache.xmlgraphics:batik-codec:${batikVersion}",
				"org.apache.xmlgraphics:batik-ext:${batikVersion}"
			],
			// Test dependencies.
			easymock: 'org.easymock:easymock:3.1',
			hamcrest: 'org.hamcrest:hamcrest-library',
			mockito: 'org.mockito:mockito-core',
			mockitoJupiter: 'org.mockito:mockito-junit-jupiter'
		]
	}
		
	ext['netty.version'] = '4.2.3.Final'

	dependencies {
		testImplementation libraries.hamcrest,
				libraries.mockito,
				libraries.mockitoJupiter,
				libraries.easymock,
				'net.javacrumbs.json-unit:json-unit-assertj:4.1.1',
				'org.junit.platform:junit-platform-launcher'
		
		errorprone 'com.google.errorprone:error_prone_core:2.38.0'
	}

	configurations {
    	all*.exclude group: 'commons-logging'
		all {	
			resolutionStrategy {
				// the following are to pick up security fixes in transitive dependencies
				force "commons-io:commons-io:${commonsIoVersion}"
		  	}
		  	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		  		if (details.requested.group == 'software.amazon.awssdk') {
		  			details.useVersion "${awsSdk2Version}"
		  		}
			}
		}
	}
	
	// Disable JavaDoc doclint on Java 8. It's annoying.
	// For jdk10+ we must explicitly choose between html4 and html5, otherwise we get a warning
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
			options.addBooleanOption('html5', true)
		}
	}

    pluginManager.withPlugin('eclipse') { 
		eclipse {
			jdt {
				javaRuntimeName = 'JavaSE-21'
				file {
					withProperties { properties ->
						// set properties for the file org.eclipse.jdt.core.prefs to enable -parameters for Spring 6
						properties['org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode'] = 'enabled'
						properties['org.eclipse.jdt.core.compiler.codegen.methodParameters'] = 'generate'
					}
				}
			}
		}
    }
    
	// At a test failure, log the stack trace to the console so that we don't
	// have to open the HTML in a browser.
	test {
		useJUnitPlatform()
		testLogging {
			exceptionFormat = 'full'
			showExceptions = true
			showCauses = true
			showStackTraces = true
		}
		maxHeapSize = '1500m'
	}
	
}

task testReport(type: TestReport) {
	destinationDirectory = file("$buildDir/reports/all-tests")
	// Combine all 'test' task results into a single HTML report
	testResults.from(subprojects*.test*.binaryResultsDirectory)
}
