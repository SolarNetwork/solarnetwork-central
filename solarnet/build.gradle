buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
}

subprojects {
	apply plugin: "java"

	group = "net.solarnetwork.central"

	java {
		toolchain {
	        languageVersion = JavaLanguageVersion.of(17)
	    }
	}

	repositories {
		mavenCentral()
		maven { url "https://dev.solarnetwork.net/archive/repository/solarnetwork-stage" }
	}

	[
		compileJava,
		compileTestJava
	].each() {
    	it.options.release = 17
		it.options.compilerArgs += [
			"-Xlint:all",
			"-Xlint:-options",
			"-Xlint:-path",
			"-Xlint:-try",
			"-parameters"
		]
		it.options.encoding = "UTF-8"
		if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
			it.options.compilerArgs += ["-Werror"]
		}
	}

	compileTestJava {
		options.compilerArgs += [
			"-Xlint:-serial"
		]
	}

	jar.manifest {
		attributes('Implementation-Title': name,
		'Implementation-Version': version,
		'Built-By': System.getProperty('user.name'),
		'Built-JDK': System.getProperty('java.version'))
	}

	javadoc.options {
		encoding = 'UTF-8'
		use = true
		links 'https://docs.oracle.com/javase/17/docs/api/'
		source = "17"
	}

	ext {
		batikVersion = '1.16'
		checkstyleVersion = '8.34'
		javaxAnnotationVersion = '1.3.2'
		jsonSchemaValidatorVersion = '1.0.73'
		myBatisStarterVersion = '2.2.0'
		snCommonVersion = '3.5.1'
		snCommonMqttVersion = '4.0.0'
		snCommonMqttNettyVersion = '3.0.1'
		snCommonOcppVersion = '2.5.0'
		snCommonOcpp16Version = '2.1.7'
		snCommonOcppWebVersion = '3.1.0'
		snCommonPkiBcVersion = '3.0.0'
		snCommonWebVersion = '3.3.0'
		snExternalOcppVersion = '1.1.2'
		superCsvVersion = '2.4.0'

		libraries = [
			batik: [
				'org.jsoup:jsoup:1.16.1',
				"org.apache.xmlgraphics:batik-transcoder:${batikVersion}",
				"org.apache.xmlgraphics:batik-codec:${batikVersion}",
				"org.apache.xmlgraphics:batik-ext:${batikVersion}"
			],
			// Test dependencies.
			easymock: 'org.easymock:easymock:3.1',
			hamcrest: 'org.hamcrest:hamcrest-library:2.2',
			junit4: 'org.junit.vintage:junit-vintage-engine',
			mockito: 'org.mockito:mockito-core:5.5.0',
			mockitoJupiter: 'org.mockito:mockito-junit-jupiter:5.5.0'
		]
	}
	
	ext['netty.version'] = '4.1.96.Final'
	ext['snakeyaml.version'] = '2.0' // SECFIX
	ext['spring-security.version']='5.8.1'
	ext['junit-jupiter.version'] = '5.10.0'
	
	dependencies {
		testImplementation libraries.junit4,
				libraries.hamcrest,
				libraries.mockito,
				libraries.mockitoJupiter,
				libraries.easymock
	}

	// Disable JavaDoc doclint on Java 8. It's annoying.
	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}

	// For jdk10 we must explicitly choose between html4 and html5, otherwise we get a warning
	if (JavaVersion.current().isJava10Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addBooleanOption('html5', true)
			}
		}
	}

	task javadocJar(type: Jar) {
		from javadoc
		archiveClassifier = 'javadoc'
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		archiveClassifier = 'sources'
	}

    pluginManager.withPlugin('eclipse') { 
		eclipse {
			jdt {
				javaRuntimeName 'JavaSE-17'
				file {
					withProperties { properties ->
						// set properties for the file org.eclipse.jdt.core.prefs to enable -parameters for Spring 6
						properties['org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode'] = 'enabled'
						properties['org.eclipse.jdt.core.compiler.codegen.methodParameters'] = 'generate'
					}
				}
			}
		}
    }
    
	// At a test failure, log the stack trace to the console so that we don't
	// have to open the HTML in a browser.
	test {
		useJUnitPlatform()
		testLogging {
			exceptionFormat = 'full'
			showExceptions true
			showCauses true
			showStackTraces true
		}
		maxHeapSize = '1500m'
	}
	
}
