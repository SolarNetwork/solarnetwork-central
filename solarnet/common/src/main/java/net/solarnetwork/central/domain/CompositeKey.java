/* ==================================================================
 * CompositeKey.java - 11/08/2022 10:48:16 am
 * 
 * Copyright 2022 SolarNetwork.net Dev Team
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.central.domain;

/**
 * API for a composite key.
 * 
 * @author matt
 * @version 1.1
 */
public interface CompositeKey {

	/**
	 * Get the number of components in the composite key.
	 * 
	 * @return the number of components
	 */
	int keyComponentLength();

	/**
	 * Test if a given key component is assigned a value or not.
	 * 
	 * <p>
	 * This method is designed to support cases when the key component is
	 * generated by an external system (such as a database) but the value is not
	 * allowed to be {@literal null}. In this situation a placeholder value
	 * representing "not a value" can be used, and this method should return
	 * {@literal false} if that value has been set on the instance.
	 * </p>
	 * 
	 * @param index
	 *        the component index to test, starting from {@literal 0}
	 * @return {@literal true} if the key component's value should be considered
	 *         "assigned", {@literal false} otherwise
	 */
	boolean keyComponentIsAssigned(int index);

	/**
	 * Get the key component for a specific index.
	 * 
	 * @param index
	 *        the index of the key to get, starting from {@literal 0}
	 * @return the associated key component, or {@literal null} if the component
	 *         is not assigned, or the index is out of range
	 */
	Object keyComponent(int index);

}
