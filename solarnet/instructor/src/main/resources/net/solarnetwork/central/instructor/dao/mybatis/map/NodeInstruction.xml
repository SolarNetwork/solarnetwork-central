<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed Nov 12 06:34:50 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.instructor.dao.mybatis.NodeInstruction">

	<insert id="insert-NodeInstruction" parameterType="NodeInstruction">
		<selectKey keyProperty="id" resultType="long" order="BEFORE"> 
              SELECT nextval('solarnet.instruction_seq') AS id 
		</selectKey>
		INSERT INTO solarnet.sn_node_instruction 
			(id
			<if test="created != null">,created</if>
			<if test="instruction.statusDate != null">,modified</if>
			, node_id
			, topic
			, instr_date
			, deliver_state
			<if test="instruction.expirationDate != null">, expire_date</if>
			<if test="instruction.resultParametersJson != null">,jresult_params</if>
			)
		VALUES
			(#{id}
			<if test="created != null">,#{created}</if>
			<if test="instruction.statusDate != null">,#{instruction.statusDate}</if>
			, #{nodeId}
			, #{instruction.topic}
			, #{instruction.instructionDate}, 
			CAST(#{instruction.state} AS solarnet.instruction_delivery_state)
			<if test="instruction.expirationDate != null">, #{instruction.expirationDate}</if>
			<if test="instruction.resultParametersJson != null">,CAST(#{instruction.resultParametersJson} AS json)</if>
			)
	</insert>

	<update id="update-NodeInstruction" parameterType="NodeInstruction">
		UPDATE 
			solarnet.sn_node_instruction
		SET
			deliver_state = CAST(#{instruction.state} AS solarnet.instruction_delivery_state),
			jresult_params = CAST(#{instruction.resultParametersJson} AS json),
			modified = <choose>
					<when test="instruction.statusDate != null">#{instruction.statusDate}</when>
					<otherwise>CURRENT_TIMESTAMP</otherwise>
				</choose>
		WHERE
			id = #{id}
	</update>

	<update id="update-NodeInstruction-compare-state" parameterType="map">
		UPDATE 
			solarnet.sn_node_instruction
		SET
			deliver_state = CAST(#{state} AS solarnet.instruction_delivery_state),
			jresult_params = CAST(#{resultParametersJson} AS json),
			modified = <choose>
					<when test="statusDate != null">#{statusDate}</when>
					<otherwise>CURRENT_TIMESTAMP</otherwise>
				</choose>
		WHERE
			id = #{id}
			AND node_id = #{nodeId}
			AND deliver_state = CAST(#{expectedState} AS solarnet.instruction_delivery_state)
	</update>

	<update id="update-NodeInstruction-state" parameterType="map">
		UPDATE 
			solarnet.sn_node_instruction
		SET
			deliver_state = CAST(#{state} AS solarnet.instruction_delivery_state),
			jresult_params = CAST(#{resultParametersJson} AS json),
			modified = <choose>
					<when test="statusDate != null">#{statusDate}</when>
					<otherwise>CURRENT_TIMESTAMP</otherwise>
				</choose>
		WHERE
			id = #{id}
			AND node_id = #{nodeId}
	</update>
	
	<update id="update-NodeInstruction-stale-state" parameterType="map">
		UPDATE 
			solarnet.sn_node_instruction
		SET
			deliver_state = CAST(#{state} AS solarnet.instruction_delivery_state),
			modified = <choose>
					<when test="statusDate != null">#{statusDate}</when>
					<otherwise>CURRENT_TIMESTAMP</otherwise>
				</choose>
		WHERE
			instr_date &lt; #{date, jdbcType=TIMESTAMP}
			AND deliver_state = CAST(#{expectedState} AS solarnet.instruction_delivery_state)
	</update>

	<sql id="fragment-NodeInstruction-full-result">
		ni.id AS sn_node_instruction_id,
		ni.created AS sn_node_instruction_created,
		ni.modified AS sn_node_instruction_modified,
		ni.node_id AS sn_node_instruction_node_id,
		ni.topic AS sn_node_instruction_topic,
		ni.instr_date AS sn_node_instruction_instr_date,
		ni.deliver_state AS sn_node_instruction_deliver_state,
		ni.expire_date AS sn_node_instruction_expire_date,
		ni.jresult_params AS sn_node_instruction_jresult_params
	</sql>
	
	<resultMap id="NodeInstructionFullResult" type="NodeInstruction">
		<id property="id" column="sn_node_instruction_id"/>
		<result property="created" column="sn_node_instruction_created"/>
		<result property="nodeId" column="sn_node_instruction_node_id"/>
		<result property="instruction.statusDate" column="sn_node_instruction_modified"/>
		<result property="instruction.topic" column="sn_node_instruction_topic"/>
		<result property="instruction.instructionDate" column="sn_node_instruction_instr_date"/>
		<result property="instruction.state" column="sn_node_instruction_deliver_state"/>
		<result property="instruction.expirationDate" column="sn_node_instruction_expire_date"/>
		<result property="instruction.resultParametersJson" column="sn_node_instruction_jresult_params"/>
		<collection property="instruction.parameters" resultMap="net.solarnetwork.central.instructor.dao.mybatis.NodeInstruction.InstructionParameterFullResult"/>
	</resultMap>
	
	<sql id="fragment-InstructionParameter-full-result">
		nip.pname AS sn_node_instruction_param_pname,
		nip.pvalue AS sn_node_instruction_param_pvalue
	</sql>
	
	<resultMap id="InstructionParameterFullResult" type="InstructionParameter">
		<result property="name" column="sn_node_instruction_param_pname"/>
		<result property="value" column="sn_node_instruction_param_pvalue"/>
	</resultMap>

	<select id="get-NodeInstruction-for-id" parameterType="long" resultMap="NodeInstructionFullResult">
		SELECT
			<include refid="fragment-NodeInstruction-full-result"/>,
			<include refid="fragment-InstructionParameter-full-result"/>
		FROM
			solarnet.sn_node_instruction ni
		LEFT OUTER JOIN 
			solarnet.sn_node_instruction_param nip ON nip.instr_id = ni.id
		WHERE
			ni.id = #{id}
	</select>
	
	<!--  Filter search -->
	
	<select id="findall-NodeInstruction-EntityMatch" parameterType="map" resultMap="NodeInstructionFullResult"  resultOrdered="true" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT 
			<include refid="fragment-NodeInstruction-full-result"/>,
			<include refid="fragment-InstructionParameter-full-result"/>
		FROM
			solarnet.sn_node_instruction ni
		LEFT OUTER JOIN 
			solarnet.sn_node_instruction_param nip ON nip.instr_id = ni.id
		<where>
			<if test="filter != null">
				<if test="filter.instructionIds != null">
					AND ni.id = ANY(#{filter.instructionIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
				</if>
				<if test="filter.nodeIds != null">
					AND ni.node_id = ANY(#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
				</if>
				<if test="filter.states != null">
					AND ni.deliver_state IN
					<foreach item="item" collection="filter.states" open="(" separator="," close=")">
					       CAST(#{item} AS solarnet.instruction_delivery_state)
					</foreach>
  				</if>
  				<if test="filter.startDate != null">
  					AND ni.instr_date &gt;= #{filter.startDate,jdbcType=TIMESTAMP}
  				</if>
  				<if test="filter.endDate != null">
  					AND ni.instr_date &lt; #{filter.endDate,jdbcType=TIMESTAMP}
  				</if>
			</if>
		</where>
		ORDER BY ni.id, nip.idx
	</select>
	
	<update id="delete-NodeInstruction-completed" statementType="CALLABLE" parameterType="map">
		{#{result, mode=OUT, jdbcType=BIGINT} = call solarnet.purge_completed_instructions(
			#{date, mode=IN, jdbcType=TIMESTAMP}
		)}
	</update>
	
	<update id="delete-NodeInstruction-incomplete" statementType="CALLABLE" parameterType="map">
		{#{result, mode=OUT, jdbcType=BIGINT} = call solarnet.purge_incomplete_instructions(
			#{date, mode=IN, jdbcType=TIMESTAMP}
		)}
	</update>
	
	<update id="update-NodeInstruction-expired" parameterType="NodeInstruction">
		UPDATE solarnet.sn_node_instruction
		SET deliver_state = #{instruction.state}::solarnet.instruction_delivery_state
			, jresult_params = CAST(COALESCE(jresult_params::jsonb, '{}'::jsonb) || #{instruction.resultParametersJson}::jsonb AS json)
		WHERE expire_date &lt; #{instruction.expirationDate}
			AND deliver_state NOT IN (
				  'Declined'::solarnet.instruction_delivery_state
				, 'Completed'::solarnet.instruction_delivery_state)
	</update>
	
	<!-- InstructionParameter support -->
	
	<select id="findall-NodeInstruction-InstructionParameter" parameterType="long" resultMap="InstructionParameterFullResult">
		SELECT 
			<include refid="fragment-InstructionParameter-full-result"/>
		FROM 
			solarnet.sn_node_instruction_param nip
		WHERE nip.instr_id = #{id}
		ORDER BY idx
	</select>
	
	<delete id="delete-NodeInstruction-InstructionParameter" parameterType="map">
		DELETE FROM solarnet.sn_node_instruction_param
		WHERE instr_id = #{id,javaType=long,jdbcType=BIGINT}
		<if test="index != null">
			AND idx = #{index,javaType=int,jdbcType=INTEGER}
		</if>
	</delete>

	<insert id="insert-NodeInstruction-InstructionParameter" parameterType="map">
		INSERT INTO solarnet.sn_node_instruction_param
			(instr_id, idx, pname, pvalue)
		VALUES
			(#{id,javaType=long,jdbcType=BIGINT}, 
			#{index,javaType=int,jdbcType=INTEGER}, 
			#{obj.name,javaType=string,jdbcType=VARCHAR}, 
			#{obj.value,javaType=string,jdbcType=VARCHAR})
	</insert>
	
	<!-- Update for filter: note <select> used to return update result set -->
	<select id="update-NodeInstruction-filter" parameterType="map" resultType="long" flushCache="true">
		UPDATE solarnet.sn_node_instruction
		SET deliver_state = #{state}::solarnet.instruction_delivery_state
		FROM solaruser.user_node
		WHERE user_node.user_id = #{userId}
			AND sn_node_instruction.node_id = user_node.node_id
			AND deliver_state &lt;&gt; #{state}::solarnet.instruction_delivery_state
		<if test="filter != null">
			<if test="filter.instructionIds != null">
				AND sn_node_instruction.id = ANY(#{filter.instructionIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="filter.nodeIds != null">
				AND sn_node_instruction.node_id = ANY(#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="filter.states != null">
				AND sn_node_instruction.deliver_state IN
				<foreach item="item" collection="filter.states" open="(" separator="," close=")">
				       CAST(#{item} AS solarnet.instruction_delivery_state)
				</foreach>
 				</if>
			<if test="filter.startDate != null">
				AND sn_node_instruction.instr_date &gt;= #{filter.startDate,jdbcType=TIMESTAMP}
			</if>
			<if test="filter.endDate != null">
				AND sn_node_instruction.instr_date &lt; #{filter.endDate,jdbcType=TIMESTAMP}
			</if>
		</if>
		RETURNING sn_node_instruction.id
	</select>

</mapper>