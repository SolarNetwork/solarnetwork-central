<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.ocpp.domain.CentralChargeSession">

	<update id="update-CentralChargeSession" parameterType="net.solarnetwork.central.ocpp.domain.CentralChargeSession">
		INSERT INTO solarev.ocpp_charge_sess (
			id
			<if test="created != null">, created</if>
			, auth_id
			, cp_id
			, evse_id
			, conn_id
			<if test="transactionId &gt; 0">, tx_id</if>
			, ended
			<if test="endReason != null">, end_reason</if>
			<if test="endAuthId != null">, end_auth_id</if>
			<if test="posted != null">, posted</if>
		) VALUES (
			#{id}
			<if test="created != null">,#{created}</if>
			, #{authId}
			, #{chargePointId}
			, #{evseId}
			, #{connectorId}
			<if test="transactionId &gt; 0">, #{transactionId}</if>
			, #{ended}
			<if test="endReason != null">, #{endReason,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}</if>
			<if test="endAuthId != null">, #{endAuthId}</if>
			<if test="posted != null">, #{posted}</if>
		)
		ON CONFLICT (id) DO UPDATE
		SET ended = EXCLUDED.ended
			<if test="endReason != null">, end_reason = EXCLUDED.end_reason</if>
			<if test="endAuthId != null">, end_auth_id = EXCLUDED.end_auth_id</if>
			<if test="posted != null">, posted = EXCLUDED.posted</if>
	</update>
	
	<sql id="fragment-CentralChargeSession-full-result">
		  cs.id AS ocpp_charge_sess_id
		, cs.created AS ocpp_charge_sess_created
		, cs.auth_id AS ocpp_charge_sess_auth_id
		, cs.cp_id AS ocpp_charge_sess_cp_id
		, cs.evse_id AS ocpp_charge_sess_evse_id
		, cs.conn_id AS ocpp_charge_sess_conn_id
		, cs.tx_id AS ocpp_charge_sess_tx_id
		, cs.ended AS ocpp_charge_sess_ended
		, cs.end_reason AS ocpp_charge_sess_end_reason
		, cs.end_auth_id AS ocpp_charge_sess_end_auth_id
		, cs.posted AS ocpp_charge_sess_posted
	</sql>
	
	<resultMap id="CentralChargeSession-FullResult" type="net.solarnetwork.central.ocpp.domain.CentralChargeSession">
		<constructor>
			<idArg column="ocpp_charge_sess_id" javaType="java.util.UUID"/>
			<arg column="ocpp_charge_sess_created" javaType="java.time.Instant"/>
			<arg column="ocpp_charge_sess_auth_id" javaType="string"/>
			<arg column="ocpp_charge_sess_cp_id" javaType="_long"/>
			<arg column="ocpp_charge_sess_evse_id" javaType="_int"/>
			<arg column="ocpp_charge_sess_conn_id" javaType="_int"/>
			<arg column="ocpp_charge_sess_tx_id" javaType="string"/>
		</constructor>
		<result column="ocpp_charge_sess_ended" property="ended"/>
		<result column="ocpp_charge_sess_end_reason" property="endReason" typeHandler="net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler"/>
		<result column="ocpp_charge_sess_end_auth_id" property="endAuthId"/>
		<result column="ocpp_charge_sess_posted" property="posted"/>
	</resultMap>

	<select id="get-CentralChargeSession-for-id" parameterType="java.util.UUID"
			resultMap="CentralChargeSession-FullResult">
		SELECT
			<include refid="fragment-CentralChargeSession-full-result"/>
		FROM
			solarev.ocpp_charge_sess cs
		WHERE
			cs.id = #{id}
	</select>
	
	<select id="get-CentralChargeSession-for-user-and-id" parameterType="map" resultMap="CentralChargeSession-FullResult">
		SELECT
			<include refid="fragment-CentralChargeSession-full-result"/>
		FROM
			solarev.ocpp_charge_sess cs
		INNER JOIN
			solarev.ocpp_charge_point cp ON cs.cp_id = cp.id
		WHERE
			cs.id = #{id}
			AND cp.user_id = #{userId}
	</select>
	
	<sql id="fragment-findall-CentralChargeSession-where">
		<if test="filter != null || userId != null">
			<where>
				<if test="filter != null">
					<include refid="fragment-findall-CentralChargeSession-where-content"/>
				</if>
			</where>
		</if>
	</sql>

	<sql id="fragment-findall-CentralChargeSession-where-content">
		<if test="userId != null">
			AND cp.user_id = #{userId}
		</if>
		<if test="filter.chargeSessionId != null">
			AND cs.id = #{filter.chargeSessionId}
		</if>
		<if test="filter.chargePointId != null">
			AND cs.cp_id = #{filter.chargePointId}
		</if>
		<if test="filter.evseId != null">
			AND cs.evse_id = #{filter.evseId}
		</if>
		<if test="filter.connectorId != null">
			AND cs.conn_id = #{filter.connectorId}
		</if>
		<if test="filter.transactionId != null and filter.transactionId &gt;= 0">
			AND cs.tx_id = #{filter.transactionId}
		</if>
	</sql>

	<sql id="fragment-findall-CentralChargeSession-order">
		ORDER BY ocpp_charge_sess_cp_id, ocpp_charge_sess_evse_id, ocpp_charge_sess_conn_id, ocpp_charge_sess_created
	</sql>

	<select id="findall-CentralChargeSession" resultMap="CentralChargeSession-FullResult"  fetchSize="100" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-CentralChargeSession-full-result"/>
		FROM
			solarev.ocpp_charge_sess cs
		<include refid="fragment-findall-CentralChargeSession-where"/>
		<include refid="fragment-findall-CentralChargeSession-order"/>
	</select>

	<select id="findall-CentralChargeSession-incomplete" resultMap="CentralChargeSession-FullResult" fetchSize="100" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-CentralChargeSession-full-result"/>
		FROM
			solarev.ocpp_charge_sess cs
		<if test="userId != null">
		INNER JOIN solarev.ocpp_charge_point cp ON cs.cp_id = cp.id
		</if>
		<where>
			cs.ended IS NULL
			<include refid="fragment-findall-CentralChargeSession-where-content"/>
		</where>
		<include refid="fragment-findall-CentralChargeSession-order"/>
	</select>
	
	<delete id="delete-CentralChargeSession-for-posted" parameterType="java.time.Instant">
		DELETE FROM solarev.ocpp_charge_sess
		WHERE posted IS NOT NULL AND posted &lt; #{posted}
	</delete>
	
	<!-- 
		SampledValue reading support
	 -->

	 <insert id="insert-CentralChargeSession-reading" parameterType="net.solarnetwork.ocpp.domain.SampledValue">
		INSERT INTO solarev.ocpp_charge_sess_reading (
			sess_id
			, ts
			<if test="location != null">, location</if>
			<if test="unit != null">, unit</if>
			<if test="context != null">, context</if>
			<if test="measurand != null">, measurand</if>
			<if test="phase != null">, phase</if>
			, reading
		) VALUES (
			#{sessionId}
			, #{timestamp}
			<if test="location != null">, #{location,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}</if>
			<if test="unit != null">, #{unit,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}</if>
			<if test="context != null">, #{context,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}</if>
			<if test="measurand != null">, #{measurand,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}</if>
			<if test="phase != null">, #{phase,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}</if>
			, #{value}
		)
	</insert>
	
	<sql id="fragment-SampledValue-full-result">
		csr.sess_id AS ocpp_charge_sess_reading_sess_id
		, csr.ts AS ocpp_charge_sess_reading_ts
		, csr.location AS ocpp_charge_sess_reading_location
		, csr.unit AS ocpp_charge_sess_reading_unit
		, csr.context AS ocpp_charge_sess_reading_context
		, csr.measurand AS ocpp_charge_sess_reading_measurand
		, csr.phase AS ocpp_charge_sess_reading_phase
		, csr.reading AS ocpp_charge_sess_reading_reading
	</sql>

	<resultMap id="SampledValue-FullResult" type="net.solarnetwork.ocpp.domain.SampledValue">
		<constructor>
			<arg column="ocpp_charge_sess_reading_sess_id" javaType="java.util.UUID"/>
			<arg column="ocpp_charge_sess_reading_ts" javaType="java.time.Instant"/>
			<arg column="ocpp_charge_sess_reading_reading" javaType="string"/>
			<arg column="ocpp_charge_sess_reading_context" javaType="net.solarnetwork.ocpp.domain.ReadingContext" typeHandler="net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler"/>
			<arg column="ocpp_charge_sess_reading_measurand" javaType="net.solarnetwork.ocpp.domain.Measurand" typeHandler="net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler"/>
			<arg column="ocpp_charge_sess_reading_phase" javaType="net.solarnetwork.ocpp.domain.Phase" typeHandler="net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler"/>
			<arg column="ocpp_charge_sess_reading_location" javaType="net.solarnetwork.ocpp.domain.Location" typeHandler="net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler"/>
			<arg column="ocpp_charge_sess_reading_unit" javaType="net.solarnetwork.ocpp.domain.UnitOfMeasure" typeHandler="net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler"/>
		</constructor>
	</resultMap>

	 <select id="findall-SampledValue-for-session" resultMap="SampledValue-FullResult" fetchSize="100" resultSetType="FORWARD_ONLY">
	 	SELECT
	 		<include refid="fragment-SampledValue-full-result"/>
		FROM
			solarev.ocpp_charge_sess_reading csr
		WHERE
			csr.sess_id = #{id}
		ORDER BY 
			ocpp_charge_sess_reading_ts
			, ocpp_charge_sess_reading_context
			, ocpp_charge_sess_reading_location
			, ocpp_charge_sess_reading_measurand
	 </select>

	<select id="find-CentralChargeSession-for-filter" parameterType="net.solarnetwork.central.ocpp.dao.ChargeSessionFilter" 
			resultMap="CentralChargeSession-FullResult" fetchSize="100" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-CentralChargeSession-full-result"/>
		FROM
			solarev.ocpp_charge_sess cs
		INNER JOIN 
			solarev.ocpp_charge_point cp ON cs.cp_id = cp.id
		<where>
			<if test="userId != null">
				AND cp.user_id = ANY(#{userIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="identifier != null">
				AND cp.ident = ANY(#{identifiers,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
			<if test="chargePointId != null">
				AND cs.cp_id = ANY(#{chargePointIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
			<if test="evseId != null">
				AND cs.evse_id = ANY(#{evseIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.IntegerArrayTypeHandler})
			</if>
			<if test="connectorId != null">
				AND cs.conn_id = ANY(#{connectorIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.IntegerArrayTypeHandler})
			</if>
			<if test="chargeSessionId != null">
				AND cs.id = ANY(#{chargeSessionIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDArrayTypeHandler})
			</if>
			<if test="active != null">
				AND cs.ended IS
				<choose>
					<when test="active">
						NULL
					</when>
					<otherwise>
						NOT NULL
					</otherwise>
				</choose>
			</if>
			<!-- transactionId -1 sent as "any transaction" -->
			<if test="transactionId != null and transactionId &gt;= 0">
				AND cs.tx_id = ANY(#{transactionIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
			<if test="endReason != null">
				AND cs.end_reason = ANY(#{endReasonCodes,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.IntegerArrayTypeHandler})
			</if>
			<if test="startDate != null">
				AND cs.created &gt;= #{startDate,jdbcType=TIMESTAMP}
			</if>
			<if test="endDate != null">
				AND cs.created &lt; #{endDate,jdbcType=TIMESTAMP}
			</if>
		</where>
		<choose>
			<when test="sorts != null and sorts.size &gt; 0">
				ORDER BY
				 <foreach collection="sorts" item="item" separator=",">
					<if test="item.sortKey == &quot;CHARGER&quot;">ocpp_charge_sess_cp_id</if>
					<if test="item.sortKey == &quot;EVSE&quot;">ocpp_charge_sess_evse_id</if>
					<if test="item.sortKey == &quot;CONNECTOR&quot;">ocpp_charge_sess_conn_id</if>
					<if test="item.sortKey == &quot;DATE&quot;">ocpp_charge_sess_created</if>
					<if test="item.sortKey == &quot;ID&quot;">ocpp_charge_sess_id</if>
					<if test="item.descending">DESC</if>
				</foreach>
			</when>
			<otherwise>
				<include refid="fragment-findall-CentralChargeSession-order"/>
			</otherwise>
		</choose>
		<if test="max != null">
			LIMIT #{max}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>
	
	<update id="update-CentralChargeSession-end-session" parameterType="map">
		UPDATE solarev.ocpp_charge_sess
		SET ended = CURRENT_TIMESTAMP
			, end_reason = #{endReason,typeHandler=net.solarnetwork.central.dao.mybatis.type.CodedValueTypeHandler}
			<if test="endAuthId != null">
			, end_auth_id = #{endAuthId,jdbcType=VARCHAR}
			</if>
		FROM solarev.ocpp_charge_point
		WHERE 
			ocpp_charge_point.id = ocpp_charge_sess.cp_id
			AND ocpp_charge_point.user_id = #{userId,jdbcType=BIGINT}
			AND ocpp_charge_sess.id = #{id,javaType=java.util.UUID}
			AND ocpp_charge_sess.ended IS NULL
	</update>
	
	<select id="get-next-transaction-id" resultType="Long" useCache="false" flushCache="true">
		SELECT nextval('solarev.ocpp_charge_tx_seq');
	</select>

</mapper>