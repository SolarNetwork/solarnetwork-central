<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.user.expire.domain.DatumDeleteJobInfo">

	<update id="update-DatumDeleteJobInfo" parameterType="net.solarnetwork.central.user.expire.domain.DatumDeleteJobInfo">
		INSERT INTO solaruser.user_datum_delete_job (
			id
			, user_id
			<if test="created != null">, created</if>
			<if test="modified != null">, modified</if>
			, state
			, config
			, success
			, message
			, started
			, completed
			, result_count
			, progress
		) VALUES (
			#{uuid,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler}
			, ${userId}
			<if test="created != null">, #{created}</if>
			<if test="modified != null">, #{modified}</if>
			, #{jobStateKey}
			, #{configJson}::jsonb
			, #{jobSuccess}
			, #{message}
			, #{started}
			, #{completed}
			, #{result}
			, #{percentComplete}
		)
		ON CONFLICT (user_id, id) DO UPDATE
		SET state = EXCLUDED.state
			, modified = EXCLUDED.modified
			, success = EXCLUDED.success
			, message = EXCLUDED.message
			, started = EXCLUDED.started
			, completed = EXCLUDED.completed
			, result_count = EXCLUDED.result_count
			, progress = EXCLUDED.progress
	</update>
	
	<sql id="fragment-DatumDeleteJobInfo-full-result">
		ddj.id AS datum_delete_job_id,
		ddj.user_id AS datum_delete_job_user_id,
		ddj.created AS datum_delete_job_created,
		ddj.modified AS datum_delete_job_modified,
		ddj.state AS datum_delete_job_state,
		ddj.config AS datum_delete_job_config,
		ddj.success AS datum_delete_job_success,
		ddj.message AS datum_delete_job_message,
		ddj.result_count AS datum_delete_job_result_count,
		ddj.progress AS datum_delete_job_progress,
		ddj.started AS datum_delete_job_started,
		ddj.completed AS datum_delete_job_completed
	</sql>
	
	<resultMap id="DatumDeleteJobInfoFullResult" type="net.solarnetwork.central.user.expire.domain.DatumDeleteJobInfo">
		<id property="uuid" column="datum_delete_job_id" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
		<id property="userId" column="datum_delete_job_user_id"/>
		<result property="created" column="datum_delete_job_created"/>
		<result property="modified" column="datum_delete_job_modified"/>
		<result property="jobStateKey" column="datum_delete_job_state"/>
		<result property="configJson" column="datum_delete_job_config"/>
		<result property="jobSuccess" column="datum_delete_job_success"/>
		<result property="message" column="datum_delete_job_message"/>
		<result property="result" column="datum_delete_job_result_count"/>
		<result property="percentComplete" column="datum_delete_job_progress"/>
		<result property="started" column="datum_delete_job_started"/>
		<result property="completed" column="datum_delete_job_completed"/>
	</resultMap>

	<resultMap id="DatumDeleteJobInfoDirectResult" type="net.solarnetwork.central.user.expire.domain.DatumDeleteJobInfo">
		<id property="uuid" column="id" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
		<id property="userId" column="user_id"/>
		<result property="created" column="created"/>
		<result property="modified" column="modified"/>
		<result property="jobStateKey" column="state"/>
		<result property="configJson" column="config"/>
		<result property="jobSuccess" column="success"/>
		<result property="message" column="message"/>
		<result property="result" column="result_count"/>
		<result property="percentComplete" column="progress"/>
		<result property="started" column="started"/>
		<result property="completed" column="completed"/>
	</resultMap>
	
	<select id="get-DatumDeleteJobInfo-for-id" parameterType="net.solarnetwork.central.user.domain.UserUuidPK" resultMap="DatumDeleteJobInfoFullResult">
		SELECT
			<include refid="fragment-DatumDeleteJobInfo-full-result"/>
		FROM
			solaruser.user_datum_delete_job ddj
		WHERE
			ddj.id = #{id} AND ddj.user_id = #{userId}
	</select>

	<select id="get-DatumDeleteJobInfo-for-claim" resultMap="DatumDeleteJobInfoDirectResult" statementType="CALLABLE">
		{call solaruser.claim_datum_delete_job()}
	</select>
	
	<select id="find-DatumDeleteJobInfo-for-user" parameterType="map" resultMap="DatumDeleteJobInfoFullResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-DatumDeleteJobInfo-full-result"/>
		FROM
			solaruser.user_datum_delete_job ddj
		WHERE
			ddj.user_id = #{userId}
			<if test="states != null and states.length > 0">
			AND state = ANY(#{states,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
		ORDER BY
			ddj.created DESC, ddj.id
	</select>
	
	<delete id="delete-DatumDeleteJobInfo-completed" parameterType="map" statementType="CALLABLE">
		{#{result, mode=OUT, jdbcType=BIGINT} = call solaruser.purge_completed_datum_delete_jobs(
			#{date, mode=IN, jdbcType=TIMESTAMP}
		)}
	</delete>
	
	<delete id="delete-DatumDeleteJobInfo-for-user" parameterType="map" statementType="CALLABLE">
		DELETE FROM 
			solaruser.user_datum_delete_job
		WHERE
			user_id = #{userId}
			<if test="ids != null and ids.length > 0">
			AND id = ANY(#{ids,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDArrayTypeHandler})
			</if>
			<if test="states != null and states.length > 0">
			AND state = ANY(#{states,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
	</delete>

	<update id="update-DatumDeleteJobInfo-state" parameterType="map">
		UPDATE
			solaruser.user_datum_delete_job
		SET
			state = #{desiredState}
			, modified = CURRENT_TIMESTAMP
		WHERE
			id = #{id.id}
			AND user_id = #{id.userId}
			<if test="expectedStates != null and expectedStates.length > 0">
			AND state = ANY(#{expectedStates,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
	</update>

	<update id="update-DatumDeleteJobInfo-config" parameterType="map">
		UPDATE
			solaruser.user_datum_delete_job
		SET
			config = #{configJson}::jsonb
			, modified = CURRENT_TIMESTAMP
		WHERE
			id = #{id.id}
			AND user_id = #{id.userId}
			<if test="expectedStates != null and expectedStates.length > 0">
			AND state = ANY(#{expectedStates,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
	</update>

	<update id="update-DatumDeleteJobInfo-progress" parameterType="map">
		UPDATE
			solaruser.user_datum_delete_job
		SET
			progress = #{progress}
			, result_count = #{loadedCount}
			, modified = CURRENT_TIMESTAMP
		WHERE
			id = #{id.id}
			AND user_id = #{id.userId}
	</update>

</mapper>