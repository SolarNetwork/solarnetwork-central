<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:osgi="http://www.eclipse.org/gemini/blueprint/schema/blueprint"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint
		http://www.eclipse.org/gemini/blueprint/schema/blueprint/gemini-blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- Configuration -->
	
	<osgix:cm-properties id="cfg" persistent-id="net.solarnetwork.central.datum.agg">
		<beans:prop key="threadPool.core">4</beans:prop>
		<beans:prop key="threadPool.max">16</beans:prop>
		<beans:prop key="threadPool.queueCapacity">16</beans:prop>
		<beans:prop key="threadPool.timeout">60</beans:prop>
		<beans:prop key="threadPool.allowCoreTimeout">true</beans:prop>
	
		<beans:prop key="staleNodeDatumProcessor.maximumRowCount">200</beans:prop>
		<beans:prop key="staleNodeDatumProcessor.taskCount">4</beans:prop>
		<beans:prop key="staleGeneralNodeDatumProcessor.hourly.jobCron">15 0/1 * * * ?</beans:prop>
		<beans:prop key="staleGeneralNodeDatumProcessor.hourly.maximumWaitMs">59000</beans:prop>
		<beans:prop key="staleGeneralNodeDatumProcessor.daily.jobCron">30 0/5 * * * ?</beans:prop>
		<beans:prop key="staleGeneralNodeDatumProcessor.daily.maximumWaitMs">299000</beans:prop>
		<beans:prop key="staleGeneralNodeDatumProcessor.monthly.jobCron">45 0/20 * * * ?</beans:prop>
		<beans:prop key="staleGeneralNodeDatumProcessor.monthly.maximumWaitMs">1199000</beans:prop>

		<beans:prop key="staleAuditNodeDatumProcessor.raw.jobCron">45 0/5 * * * ?</beans:prop>
		<beans:prop key="staleAuditNodeDatumProcessor.hourly.jobCron">45 3/5 * * * ?</beans:prop>
		<beans:prop key="staleAuditNodeDatumProcessor.daily.jobCron">30 4/5 * * * ?</beans:prop>
		<beans:prop key="staleAuditNodeDatumProcessor.monthly.jobCron">45 10/20 * * * ?</beans:prop>
		
		<beans:prop key="staleSolarFluxProcessor.maximumRowCount">1000</beans:prop>
		<beans:prop key="staleSolarFluxProcessor.taskCount">4</beans:prop>
		<beans:prop key="staleSolarFluxProcessor.jobCron">45 0/1 * * * ?</beans:prop>
		<beans:prop key="staleSolarFluxProcessor.maximumWaitMs">59000</beans:prop>

		<beans:prop key="auditDatumDailyMissingPopulator.jobCron">45 15 2/8 * * ?</beans:prop>
		<beans:prop key="auditDatumDailyMissingPopulator.jdbcCall">{? = call solardatm.populate_audit_datm_daily_missing()}</beans:prop>
	</osgix:cm-properties>

	<ctx:property-placeholder properties-ref="cfg"/>

	<!-- Service references -->

	<reference id="eventAdmin" interface="org.osgi.service.event.EventAdmin"/>

	<reference id="jdbcOps" interface="org.springframework.jdbc.core.JdbcOperations" filter="(db=central)"/>
	
	<bean id="datumAppEventAcceptors" class="net.solarnetwork.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.central.datum.biz.DatumAppEventAcceptor"/>
		<property name="serviceFilter" value="(topic=datum/agg/update)"/>
	</bean>

	<!-- Supporting Services -->
	
	<!-- A common thread pool for these jobs -->
	<bean id="executorService" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool" destroy-method="shutdown">
		<argument>
			<bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
				<argument value="SolarNet-Datum-Agg-"/>
			</bean>
		</argument>
	</bean>

	<!-- A common parallel task thread pool for these jobs -->
	<bean id="parallelTaskExecutorService" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean" destroy-method="shutdown">
		<property name="threadFactory">
			<bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
				<argument value="SolarNet-Datum-Agg-Task-"/>
			</bean>
		</property>
		<property name="corePoolSize" value="${threadPool.core}"/>
		<property name="maxPoolSize" value="${threadPool.max}"/>
		<property name="queueCapacity" value="${threadPool.queueCapacity}"/>
		<property name="keepAliveSeconds" value="${threadPool.timeout}"/>
		<property name="allowCoreThreadTimeOut" value="${threadPool.allowCoreTimeout}"/>
	</bean>
	
	<bean id="staleDatumProcessorHourly" class="net.solarnetwork.central.datum.agg.StaleDatumStreamProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="parallelTaskExecutorService" ref="parallelTaskExecutorService"/>
		<property name="datumAppEventAcceptors" ref="datumAppEventAcceptors"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="maximumWaitMs" value="${staleGeneralNodeDatumProcessor.hourly.maximumWaitMs}"/>
		<property name="jobCron" value="${staleGeneralNodeDatumProcessor.hourly.jobCron}"/>
		<property name="jobId" value="StaleDatumStreamProcessorHourly"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleDatumStreamProcessor"/>
		<property name="aggregateProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).Hour.getKey()}"/>
	</bean>
	
	<bean id="staleDatumProcessorDaily" class="net.solarnetwork.central.datum.agg.StaleDatumStreamProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="parallelTaskExecutorService" ref="parallelTaskExecutorService"/>
		<property name="datumAppEventAcceptors" ref="datumAppEventAcceptors"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="maximumWaitMs" value="${staleGeneralNodeDatumProcessor.daily.maximumWaitMs}"/>
		<property name="jobCron" value="${staleGeneralNodeDatumProcessor.daily.jobCron}"/>
		<property name="jobId" value="StaleDatumStreamProcessorDaily"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleDatumStreamProcessor"/>
		<property name="aggregateProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).Day.getKey()}"/>
	</bean>
	
	<bean id="staleDatumProcessorMonthly" class="net.solarnetwork.central.datum.agg.StaleDatumStreamProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="parallelTaskExecutorService" ref="parallelTaskExecutorService"/>
		<property name="datumAppEventAcceptors" ref="datumAppEventAcceptors"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="maximumWaitMs" value="${staleGeneralNodeDatumProcessor.monthly.maximumWaitMs}"/>
		<property name="jobCron" value="${staleGeneralNodeDatumProcessor.monthly.jobCron}"/>
		<property name="jobId" value="StaleDatumStreamProcessorMonthly"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleDatumStreamProcessor"/>
		<property name="aggregateProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).Month.getKey()}"/>
	</bean>
	
	<bean id="staleAuditDatumProcessorRaw" class="net.solarnetwork.central.datum.agg.StaleAuditDataProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="jobCron" value="${staleAuditNodeDatumProcessor.raw.jobCron}"/>
		<property name="jobId" value="StaleAuditNodeDatumProcessorRaw"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleAuditNodeDatumProcessor"/>
		<property name="tierProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).None.getKey()}"/>
	</bean>
	
	<bean id="staleAuditDatumProcessorHourly" class="net.solarnetwork.central.datum.agg.StaleAuditDataProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="jobCron" value="${staleAuditNodeDatumProcessor.hourly.jobCron}"/>
		<property name="jobId" value="StaleAuditNodeDatumProcessorHourly"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleAuditNodeDatumProcessor"/>
		<property name="tierProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).Hour.getKey()}"/>
	</bean>
	
	<bean id="staleAuditDatumProcessorDaily" class="net.solarnetwork.central.datum.agg.StaleAuditDataProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="jobCron" value="${staleAuditNodeDatumProcessor.daily.jobCron}"/>
		<property name="jobId" value="StaleAuditNodeDatumProcessorDaily"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleAuditNodeDatumProcessor"/>
		<property name="tierProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).Day.getKey()}"/>
	</bean>
	
	<bean id="staleAuditDatumProcessorMonthly" class="net.solarnetwork.central.datum.agg.StaleAuditDataProcessor"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="maximumIterations" value="${staleNodeDatumProcessor.maximumRowCount}"/>
		<property name="parallelism" value="${staleNodeDatumProcessor.taskCount}"/>
		<property name="jobCron" value="${staleAuditNodeDatumProcessor.monthly.jobCron}"/>
		<property name="jobId" value="StaleAuditNodeDatumProcessorMonthly"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/StaleAuditNodeDatumProcessor"/>
		<property name="tierProcessType" value="#{T(net.solarnetwork.central.domain.Aggregation).Month.getKey()}"/>
	</bean>
	
	<bean id="auditDatumDailyMissingPopulator" class="net.solarnetwork.central.datum.agg.JdbcCallJob"
				init-method="setup">
		<argument ref="eventAdmin"/>
		<argument ref="jdbcOps"/>
		<property name="executorService" ref="executorService"/>
		<property name="jobCron" value="${auditDatumDailyMissingPopulator.jobCron}"/>
		<property name="jobId" value="AuditDatumDailyMissingPopulator"/>
		<property name="jobTopic" value="net/solarnetwork/central/datum/agg/AuditDatumDailyMissingPopulator"/>
		<property name="jdbcCall" value="${auditDatumDailyMissingPopulator.jdbcCall}"/>
	</bean>
	
	<!-- Published Services -->

	<service ref="staleDatumProcessorHourly" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleDatumProcessorHourly.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service ref="staleDatumProcessorDaily" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleDatumProcessorDaily.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service ref="staleDatumProcessorMonthly" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleDatumProcessorMonthly.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service ref="staleAuditDatumProcessorRaw" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleAuditDatumProcessorRaw.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service ref="staleAuditDatumProcessorHourly" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleAuditDatumProcessorHourly.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service ref="staleAuditDatumProcessorDaily" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleAuditDatumProcessorDaily.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service ref="staleAuditDatumProcessorMonthly" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{staleAuditDatumProcessorMonthly.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>
	
	<service ref="auditDatumDailyMissingPopulator" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.central.scheduler.SchedulerConstants).TOPIC_SCHEDULER_READY}</value>
					<value>#{auditDatumDailyMissingPopulator.jobTopic}</value>
				</array>
			</entry>
		</service-properties>
	</service>
	
</blueprint>
