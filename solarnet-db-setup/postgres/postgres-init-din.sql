CREATE SCHEMA IF NOT EXISTS solardin;

ALTER DEFAULT PRIVILEGES IN SCHEMA solardin REVOKE ALL ON TABLES FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA solardin REVOKE ALL ON SEQUENCES FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA solardin REVOKE ALL ON FUNCTIONS FROM PUBLIC;

/**
 * Account-wide datum input data, to support "previous" input tracking.
 *
 * @column user_id 		the ID of the account owner
 * @column node_id 		the ID of the datum stream node
 * @column source_id	the ID of the datum stream source
 * @column created		the creation date
 * @column input_data	the input data
 */
CREATE TABLE solardin.din_input_data (
	user_id			BIGINT NOT NULL,
	node_id			BIGINT NOT NULL,
	source_id		CHARACTER VARYING(64) NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	input_data		bytea,
	CONSTRAINT din_input_data_pk PRIMARY KEY (user_id, node_id, source_id),
	CONSTRAINT din_input_data_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide datum input username/password credentials.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the certificate as enabled for use by application or not
 * @column username 	the username
 * @column expires		the expiration date
 * @column password		the password
 */
CREATE TABLE solardin.din_credential (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	username		CHARACTER VARYING(64) NOT NULL,
	password		CHARACTER VARYING(64) NOT NULL,
	expires			TIMESTAMP WITH TIME ZONE,
	CONSTRAINT din_credential_pk PRIMARY KEY (user_id, id),
	CONSTRAINT din_credential_username_unq UNIQUE (user_id, username),
	CONSTRAINT din_credential_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide datum input transform service configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname		friendly name
 * @column sident		the transform service identifier
 * @column sprops		the transform service settings
 */
CREATE TABLE solardin.din_xform (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT din_xform_pkey PRIMARY KEY (user_id, id),
	CONSTRAINT din_xform_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Datum input overall endpoint configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			UUID for the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column cname		friendly name
 * @column node_id		the default node ID to use, if the transform does not provide one
 * @column source_id	the default source ID to use, if the transform does not provide one
 * @column xform_id		the din_xform ID to use
 */
CREATE TABLE solardin.din_endpoint (
	user_id			BIGINT NOT NULL,
	id				UUID NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	node_id			BIGINT,
	source_id		CHARACTER VARYING(64),
	xform_id		BIGINT,
	pub_flux		BOOLEAN NOT NULL DEFAULT TRUE,
	track_prev 		BOOLEAN NOT NULL DEFAULT FALSE,
	incl_res_body	BOOLEAN NOT NULL DEFAULT FALSE,
	req_type		CHARACTER VARYING(96),
	CONSTRAINT din_endpoint_pk PRIMARY KEY (user_id, id),
	CONSTRAINT din_endpoint_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT din_endpoint_xform_fk FOREIGN KEY (user_id, xform_id)
		REFERENCES solardin.din_xform (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Datum input endpoint authorization credentials configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column endpoint_id 	the ID of the solardin.din_endpoint record
 * @column cred_id		the ID of the solardin.din_credential record
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 */
CREATE TABLE solardin.din_endpoint_auth_cred (
	user_id			BIGINT NOT NULL,
	endpoint_id		UUID NOT NULL,
	cred_id			BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT din_endpoint_auth_cred_pk PRIMARY KEY (user_id, endpoint_id, cred_id),
	CONSTRAINT din_endpoint_auth_cred_endpoint_fk FOREIGN KEY (user_id, endpoint_id)
		REFERENCES solardin.din_endpoint (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT din_endpoint_auth_cred_cred_fk FOREIGN KEY (user_id, cred_id)
		REFERENCES solardin.din_credential (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide instruction input username/password credentials.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the certificate as enabled for use by application or not
 * @column username 	the username
 * @column password		the password
 * @column expires		the expiration date
 * @column oauth		the OAuth username mode
 */
CREATE TABLE solardin.inin_credential (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	username		CHARACTER VARYING(256) NOT NULL,
	password		CHARACTER VARYING(64),
	expires			TIMESTAMP WITH TIME ZONE,
	oauth			BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT inin_credential_pk PRIMARY KEY (user_id, id),
	CONSTRAINT inin_credential_username_unq UNIQUE (user_id, username),
	CONSTRAINT inin_credential_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- OAuth credentials must be unique by username (issuer URL)
CREATE UNIQUE INDEX inin_credential_oauth_unq ON solardin.inin_credential (username)
    WHERE oauth;

/**
 * Account-wide instruction input request transform service configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname		friendly name
 * @column sident		the transform service identifier
 * @column sprops		the transform service settings
 */
CREATE TABLE solardin.inin_req_xform (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT inin_req_xform_pkey PRIMARY KEY (user_id, id),
	CONSTRAINT inin_req_xform_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide instruction input response transform service configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname		friendly name
 * @column sident		the transform service identifier
 * @column sprops		the transform service settings
 */
CREATE TABLE solardin.inin_res_xform (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT inin_res_xform_pkey PRIMARY KEY (user_id, id),
	CONSTRAINT inin_res_xform_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Instruction input overall endpoint configuration.
 *
 * @column user_id 			the ID of the account owner
 * @column id 				UUID for the configuration
 * @column created			the creation date
 * @column modified			the modification date
 * @column enabled			a flag to mark the configuration as enabled for use by application or not
 * @column cname			friendly name
 * @column node_ids			the node IDs to use, if the transform does not provide one
 * @column req_xform_id		the inin_req_xform ID to use
 * @column res_xform_id		the inin_res_xform ID to use
 * @column max_exec_secs	maximum seconds to wait for results
 * @column user_meta_path	solaruser.user_meta metadata path
 */
CREATE TABLE solardin.inin_endpoint (
	user_id			BIGINT NOT NULL,
	id				UUID NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	node_ids		BIGINT[],
	req_xform_id	BIGINT,
	res_xform_id	BIGINT,
	max_exec_secs	INTEGER NOT NULL,
	user_meta_path	TEXT,
	req_type		CHARACTER VARYING(96),
	res_type		CHARACTER VARYING(96),
	CONSTRAINT inin_endpoint_pk PRIMARY KEY (user_id, id),
	CONSTRAINT inin_endpoint_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT inin_endpoint_req_xform_fk FOREIGN KEY (user_id, req_xform_id)
		REFERENCES solardin.inin_req_xform (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT inin_endpoint_res_xform_fk FOREIGN KEY (user_id, res_xform_id)
		REFERENCES solardin.inin_res_xform (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Instruction input endpoint authorization credentials configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column endpoint_id 	the ID of the solardin.inin_endpoint record
 * @column cred_id		the ID of the solardin.inin_credential record
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 */
CREATE TABLE solardin.inin_endpoint_auth_cred (
	user_id			BIGINT NOT NULL,
	endpoint_id		UUID NOT NULL,
	cred_id			BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT inin_endpoint_auth_cred_pk PRIMARY KEY (user_id, endpoint_id, cred_id),
	CONSTRAINT inin_endpoint_auth_cred_endpoint_fk FOREIGN KEY (user_id, endpoint_id)
		REFERENCES solardin.inin_endpoint (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT inin_endpoint_auth_cred_cred_fk FOREIGN KEY (user_id, cred_id)
		REFERENCES solardin.inin_credential (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/*============================================
  Cloud Integrations
  ============================================ */

/**
 * Cloud integration user (account) configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column pub_in		a flag to publish datum streams to SolarIn
 * @column pub_flux		a flag to publish datum streams to SolarFlux
 */
CREATE TABLE solardin.cin_user_settings (
	user_id			BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	pub_in			BOOLEAN NOT NULL DEFAULT TRUE,
	pub_flux		BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT cin_user_settings_pk PRIMARY KEY (user_id),
	CONSTRAINT cin_user_settings_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Cloud integration configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column cname 		a name for the configuration
 * @column sident 		the cloud integration service identifier
 * @column sprops 		the cloud integration service properties
 */
CREATE TABLE solardin.cin_integration (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT cin_integration_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_integration_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Cloud datum stream property mapping configuration.
 *
 * Provides a property mapping template that can be used across any number of datum streams.
 *
 * @column user_id 		the ID of the account owner
 * @column int_id 		the ID of the integration associated with this configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname 		a name for the configuration
 * @column sprops 		the cloud integration service properties
 */
CREATE TABLE solardin.cin_datum_stream_map (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	int_id 			BIGINT NOT NULL,
	sprops			jsonb,
	CONSTRAINT cin_datum_stream_map_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_datum_stream_map_int_fk FOREIGN KEY (user_id, int_id)
		REFERENCES solardin.cin_integration (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Cloud datum stream property configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column map_id 		the ID of the datum stream mapping associated with this configuration
 * @column idx 			the index (order) of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column ptype 		the datum samples type (key)
 * @column pname 		the datum stream property name to populate
 * @column vtype		the value type (reference or expression)
 * @column vref 		the cloud data source value reference, or expression
 * @column mult 		an optional multiplication factor to apply to values
 * @column scale 		an optional maximum number of decimal places to round values to
 */
CREATE TABLE solardin.cin_datum_stream_prop (
	user_id			BIGINT NOT NULL,
	map_id 			BIGINT NOT NULL,
	idx				SMALLINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	ptype			CHARACTER(1) NOT NULL,
	pname			CHARACTER VARYING(64) NOT NULL,
	vtype			CHARACTER(1) NOT NULL,
	vref			CHARACTER VARYING(4096) NOT NULL,
	mult			NUMERIC,
	scale			SMALLINT,
	CONSTRAINT cin_datum_stream_prop_pk PRIMARY KEY (user_id, map_id, idx),
	CONSTRAINT cin_datum_stream_prop_map_fk FOREIGN KEY (user_id, map_id)
		REFERENCES solardin.cin_datum_stream_map (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Cloud datum stream configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column cname 		a name for the configuration
 * @column sident 		the cloud integration service identifier
 * @column map_id 		the ID of the datum stream mapping associated with the datum stream
 * @column kind 		the datum stream object kind (key)
 * @column obj_id 		the datum stream object ID (node ID, location ID)
 * @column source_id 	the datum stream source ID (supports placeholders)
 * @column sprops 		the cloud integration service properties
 */
CREATE TABLE solardin.cin_datum_stream (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	map_id			BIGINT,
	schedule 		CHARACTER VARYING(64),
	kind 			CHARACTER(1) NOT NULL,
	obj_id 			BIGINT,
	source_id 		CHARACTER VARYING(256),
	sprops			jsonb,
	CONSTRAINT cin_datum_stream_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_datum_stream_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT cin_datum_stream_map_fk FOREIGN KEY (user_id, map_id)
		REFERENCES solardin.cin_datum_stream_map (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Cloud datum stream settings, to override cin_user_settings.
 *
 * @column user_id 		the ID of the account owner
 * @column ds_id 		the ID of the datum stream associated with this configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column pub_in		a flag to publish datum streams to SolarIn
 * @column pub_flux		a flag to publish datum streams to SolarFlux
 */
CREATE TABLE solardin.cin_datum_stream_settings (
	user_id			BIGINT NOT NULL,
	ds_id 			BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	pub_in			BOOLEAN NOT NULL DEFAULT TRUE,
	pub_flux		BOOLEAN NOT NULL DEFAULT TRUE,
	CONSTRAINT cin_datum_stream_settings_pk PRIMARY KEY (user_id, ds_id),
	CONSTRAINT cin_datum_stream_settings_ds_fk FOREIGN KEY (user_id, ds_id)
		REFERENCES solardin.cin_datum_stream (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Cloud datum stream poll task table.
 *
 * @column user_id 		the ID of the account owner
 * @column ds_id 		the ID of the datum stream associated with this configuration
 * @column status 		task status, e.g. queued, executing, error
 * @column exec_at 		the next scheduled time for the poll task to execute
 * @column start_at     the starting date to query data from
 */
CREATE TABLE solardin.cin_datum_stream_poll_task (
	user_id			BIGINT NOT NULL,
	ds_id 			BIGINT NOT NULL,
	status 			CHARACTER(1) NOT NULL,
	exec_at 		TIMESTAMP WITH TIME ZONE NOT NULL,
	start_at 		TIMESTAMP WITH TIME ZONE NOT NULL,
	message 		TEXT,
	sprops 			JSONB,
	CONSTRAINT cin_datum_stream_poll_task_pk PRIMARY KEY (user_id, ds_id),
	CONSTRAINT cin_datum_stream_poll_task_ds_fk FOREIGN KEY (user_id, ds_id)
		REFERENCES solardin.cin_datum_stream (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- index to speed up claim task query
CREATE INDEX cin_datum_stream_poll_task_exec_idx ON solardin.cin_datum_stream_poll_task
	(exec_at) WHERE (status = 'q');


/**
 * Cloud datum stream rake task table.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column ds_id 		the ID of the datum stream associated with this configuration
 * @column status 		task status, e.g. queued, executing, error
 * @column exec_at 		the next scheduled time for the poll task to execute
 * @column start_offset the offset from execution time to start raking at
 * @column message      the last message created for the task
 * @param sprops        task configuration
 */
CREATE TABLE solardin.cin_datum_stream_rake_task (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	ds_id 			BIGINT NOT NULL,
	status 			CHARACTER(1) NOT NULL,
	exec_at 		TIMESTAMP WITH TIME ZONE NOT NULL,
	start_offset 	INTERVAL NOT NULL,
	message 		TEXT,
	sprops 			JSONB,
	CONSTRAINT cin_datum_stream_rake_task_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_datum_stream_rake_task_ds_fk FOREIGN KEY (user_id, ds_id)
		REFERENCES solardin.cin_datum_stream (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- index to speed up claim task query
CREATE INDEX cin_datum_stream_rake_task_exec_idx ON solardin.cin_datum_stream_rake_task
	(exec_at) WHERE (status = 'q');


/**************************************************************************************************
 * FUNCTION solardin.claim_datum_stream_poll_task()
 *
 * "Claim" a poll task from the solardin.cin_datum_stream_poll_task table that has a status of 'q'
 * and change the status to 'p' and return it. The tasks will be claimed from oldest to newest
 * based on the exec_at column.
 *
 * @return the claimed row, if one was able to be claimed
 */
CREATE OR REPLACE FUNCTION solardin.claim_datum_stream_poll_task()
	RETURNS SETOF solardin.cin_datum_stream_poll_task LANGUAGE plpgsql VOLATILE ROWS 1 AS
$$
DECLARE
	rec solardin.cin_datum_stream_poll_task;

	-- include ORDER BY here to encourage cin_datum_stream_poll_task_exec_idx to be used
	curs CURSOR FOR SELECT * FROM solardin.cin_datum_stream_poll_task
			WHERE status = 'q'
			AND exec_at <= CURRENT_TIMESTAMP
			ORDER BY exec_at
			LIMIT 1
			FOR UPDATE SKIP LOCKED;
BEGIN
	OPEN curs;
	FETCH NEXT FROM curs INTO rec;
	IF FOUND THEN
		UPDATE solardin.cin_datum_stream_poll_task SET status = 'p' WHERE CURRENT OF curs;
		rec.status = 'p';
		RETURN NEXT rec;
	END IF;
	CLOSE curs;
	RETURN;
END
$$;


/**************************************************************************************************
 * FUNCTION solardin.claim_datum_stream_rake_task()
 *
 * "Claim" a rake task from the solardin.cin_datum_stream_rake_task table that has a status of 'q'
 * and change the status to 'p' and return it. The tasks will be claimed from oldest to newest
 * based on the exec_at column.
 *
 * @return the claimed row, if one was able to be claimed
 */
CREATE OR REPLACE FUNCTION solardin.claim_datum_stream_rake_task()
	RETURNS SETOF solardin.cin_datum_stream_rake_task LANGUAGE plpgsql VOLATILE ROWS 1 AS
$$
DECLARE
	rec solardin.cin_datum_stream_rake_task;

	-- include ORDER BY here to encourage cin_datum_stream_rake_task_exec_idx to be used
	curs CURSOR FOR SELECT * FROM solardin.cin_datum_stream_rake_task t
			WHERE t.status = 'q'
			AND t.exec_at <= CURRENT_TIMESTAMP
			AND NOT EXISTS (
				SELECT id FROM solardin.cin_datum_stream_rake_task g
				WHERE g.user_id = t.user_id
				AND g.ds_id = t.ds_id
				AND g.status IN ('p', 'e')
			)
			ORDER BY t.exec_at
			LIMIT 1
			FOR UPDATE SKIP LOCKED;
BEGIN
	OPEN curs;
	FETCH NEXT FROM curs INTO rec;
	IF FOUND THEN
		UPDATE solardin.cin_datum_stream_rake_task SET status = 'p' WHERE CURRENT OF curs;
		rec.status = 'p';
		RETURN NEXT rec;
	END IF;
	CLOSE curs;
	RETURN;
END
$$;


/**************************************************************************************************
 * TRIGGER function that automatically updates datum stream poll task statuses when updating
 * the enabled flag on an integration: stopping associated tasks when disabling the integration
 * and starting otherwise.
 */
CREATE OR REPLACE FUNCTION solardin.change_integration_enabled()
	RETURNS "trigger"  LANGUAGE plpgsql VOLATILE AS
$$
BEGIN
	UPDATE solardin.cin_datum_stream_poll_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id IN (
		SELECT cds.id
		FROM solardin.cin_datum_stream cds
		INNER JOIN solardin.cin_datum_stream_map cdsm ON cdsm.id = cds.map_id
		WHERE cds.user_id = NEW.user_id
		AND cdsm.int_id = NEW.id
		AND cds.enabled = TRUE
	);

	UPDATE solardin.cin_datum_stream_rake_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id IN (
		SELECT cds.id
		FROM solardin.cin_datum_stream cds
		INNER JOIN solardin.cin_datum_stream_map cdsm ON cdsm.id = cds.map_id
		WHERE cds.user_id = NEW.user_id
		AND cdsm.int_id = NEW.id
		AND cds.enabled = TRUE
	);

	RETURN NEW;
END
$$;

CREATE TRIGGER change_integration_enabled
  BEFORE UPDATE
  ON solardin.cin_integration
  FOR EACH ROW
  WHEN (OLD.enabled IS DISTINCT FROM NEW.enabled)
  EXECUTE PROCEDURE solardin.change_integration_enabled();


/**************************************************************************************************
 * TRIGGER function that automatically updates datum stream poll task statuses when updating
 * the enabled flag on a datum stream: stopping associated tasks when disabling the daum stream
 * and starting otherwise.
 */
CREATE OR REPLACE FUNCTION solardin.change_datum_stream_enabled()
	RETURNS "trigger"  LANGUAGE plpgsql VOLATILE AS
$$
BEGIN
	UPDATE solardin.cin_datum_stream_poll_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id = NEW.id
	AND EXISTS (
		SELECT 1
		FROM solardin.cin_datum_stream_map cdsm
		INNER JOIN solardin.cin_integration ci ON ci.id = cdsm.int_id
		WHERE ci.user_id = NEW.user_id
		AND cdsm.id = NEW.map_id
		AND ci.enabled = TRUE
	);

	UPDATE solardin.cin_datum_stream_rake_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id = NEW.id
	AND EXISTS (
		SELECT 1
		FROM solardin.cin_datum_stream_map cdsm
		INNER JOIN solardin.cin_integration ci ON ci.id = cdsm.int_id
		WHERE ci.user_id = NEW.user_id
		AND cdsm.id = NEW.map_id
		AND ci.enabled = TRUE
	);

	RETURN NEW;
END
$$;

CREATE TRIGGER change_datum_stream_enabled
  BEFORE UPDATE
  ON solardin.cin_datum_stream
  FOR EACH ROW
  WHEN (OLD.enabled IS DISTINCT FROM NEW.enabled)
  EXECUTE PROCEDURE solardin.change_datum_stream_enabled();
