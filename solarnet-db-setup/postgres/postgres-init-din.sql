CREATE SCHEMA IF NOT EXISTS solardin;

ALTER DEFAULT PRIVILEGES IN SCHEMA solardin REVOKE ALL ON TABLES FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA solardin REVOKE ALL ON SEQUENCES FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA solardin REVOKE ALL ON FUNCTIONS FROM PUBLIC;

/**
 * Account-wide datum input data, to support "previous" input tracking.
 *
 * @column user_id 		the ID of the account owner
 * @column node_id 		the ID of the datum stream node
 * @column source_id	the ID of the datum stream source
 * @column created		the creation date
 * @column input_data	the input data
 */
CREATE TABLE solardin.din_input_data (
	user_id			BIGINT NOT NULL,
	node_id			BIGINT NOT NULL,
	source_id		CHARACTER VARYING(64) NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	input_data		bytea,
	CONSTRAINT din_input_data_pk PRIMARY KEY (user_id, node_id, source_id),
	CONSTRAINT din_input_data_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide datum input username/password credentials.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the certificate as enabled for use by application or not
 * @column username 	the username
 * @column expires		the expiration date
 * @column password		the password
 */
CREATE TABLE solardin.din_credential (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	username		CHARACTER VARYING(64) NOT NULL,
	password		CHARACTER VARYING(64) NOT NULL,
	expires			TIMESTAMP WITH TIME ZONE,
	CONSTRAINT din_credential_pk PRIMARY KEY (user_id, id),
	CONSTRAINT din_credential_username_unq UNIQUE (user_id, username),
	CONSTRAINT din_credential_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide datum input transform service configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname		friendly name
 * @column sident		the transform service identifier
 * @column sprops		the transform service settings
 */
CREATE TABLE solardin.din_xform (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT din_xform_pkey PRIMARY KEY (user_id, id),
	CONSTRAINT din_xform_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Datum input overall endpoint configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			UUID for the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column cname		friendly name
 * @column node_id		the default node ID to use, if the transform does not provide one
 * @column source_id	the default source ID to use, if the transform does not provide one
 * @column xform_id		the din_xform ID to use
 */
CREATE TABLE solardin.din_endpoint (
	user_id			BIGINT NOT NULL,
	id				UUID NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	node_id			BIGINT,
	source_id		CHARACTER VARYING(64),
	xform_id		BIGINT,
	pub_flux		BOOLEAN NOT NULL DEFAULT TRUE,
	track_prev 		BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT din_endpoint_pk PRIMARY KEY (user_id, id),
	CONSTRAINT din_endpoint_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT din_endpoint_xform_fk FOREIGN KEY (user_id, xform_id)
		REFERENCES solardin.din_xform (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE SET NULL
);


/**
 * Datum input endpoint authorization credentials configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column endpoint_id 	the ID of the solardin.din_endpoint record
 * @column cred_id		the ID of the solardin.din_credential record
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 */
CREATE TABLE solardin.din_endpoint_auth_cred (
	user_id			BIGINT NOT NULL,
	endpoint_id		UUID NOT NULL,
	cred_id			BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT din_endpoint_auth_cred_pk PRIMARY KEY (user_id, endpoint_id, cred_id),
	CONSTRAINT din_endpoint_auth_cred_endpoint_fk FOREIGN KEY (user_id, endpoint_id)
		REFERENCES solardin.din_endpoint (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT din_endpoint_auth_cred_cred_fk FOREIGN KEY (user_id, cred_id)
		REFERENCES solardin.din_credential (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide instruction input username/password credentials.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the certificate as enabled for use by application or not
 * @column username 	the username
 * @column password		the password
 * @column expires		the expiration date
 * @column oauth		the OAuth username mode
 */
CREATE TABLE solardin.inin_credential (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	username		CHARACTER VARYING(256) NOT NULL,
	password		CHARACTER VARYING(64),
	expires			TIMESTAMP WITH TIME ZONE,
	oauth			BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT inin_credential_pk PRIMARY KEY (user_id, id),
	CONSTRAINT inin_credential_username_unq UNIQUE (user_id, username),
	CONSTRAINT inin_credential_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- OAuth credentials must be unique by username (issuer URL)
CREATE UNIQUE INDEX inin_credential_oauth_unq ON solardin.inin_credential (username)
    WHERE oauth;

/**
 * Account-wide instruction input request transform service configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname		friendly name
 * @column sident		the transform service identifier
 * @column sprops		the transform service settings
 */
CREATE TABLE solardin.inin_req_xform (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT inin_req_xform_pkey PRIMARY KEY (user_id, id),
	CONSTRAINT inin_req_xform_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Account-wide instruction input response transform service configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column cname		friendly name
 * @column sident		the transform service identifier
 * @column sprops		the transform service settings
 */
CREATE TABLE solardin.inin_res_xform (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT inin_res_xform_pkey PRIMARY KEY (user_id, id),
	CONSTRAINT inin_res_xform_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);


/**
 * Instruction input overall endpoint configuration.
 *
 * @column user_id 			the ID of the account owner
 * @column id 				UUID for the configuration
 * @column created			the creation date
 * @column modified			the modification date
 * @column enabled			a flag to mark the configuration as enabled for use by application or not
 * @column cname			friendly name
 * @column node_ids			the node IDs to use, if the transform does not provide one
 * @column req_xform_id		the inin_req_xform ID to use
 * @column res_xform_id		the inin_res_xform ID to use
 * @column max_exec_secs	maximum seconds to wait for results
 * @column user_meta_path	solaruser.user_meta metadata path
 */
CREATE TABLE solardin.inin_endpoint (
	user_id			BIGINT NOT NULL,
	id				UUID NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	node_ids		BIGINT[],
	req_xform_id	BIGINT,
	res_xform_id	BIGINT,
	max_exec_secs	INTEGER NOT NULL,
	user_meta_path	TEXT,
	CONSTRAINT inin_endpoint_pk PRIMARY KEY (user_id, id),
	CONSTRAINT inin_endpoint_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT inin_endpoint_req_xform_fk FOREIGN KEY (user_id, req_xform_id)
		REFERENCES solardin.inin_req_xform (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE SET NULL,
	CONSTRAINT inin_endpoint_res_xform_fk FOREIGN KEY (user_id, res_xform_id)
		REFERENCES solardin.inin_res_xform (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE SET NULL
);


/**
 * Instruction input endpoint authorization credentials configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column endpoint_id 	the ID of the solardin.inin_endpoint record
 * @column cred_id		the ID of the solardin.inin_credential record
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 */
CREATE TABLE solardin.inin_endpoint_auth_cred (
	user_id			BIGINT NOT NULL,
	endpoint_id		UUID NOT NULL,
	cred_id			BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT inin_endpoint_auth_cred_pk PRIMARY KEY (user_id, endpoint_id, cred_id),
	CONSTRAINT inin_endpoint_auth_cred_endpoint_fk FOREIGN KEY (user_id, endpoint_id)
		REFERENCES solardin.inin_endpoint (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT inin_endpoint_auth_cred_cred_fk FOREIGN KEY (user_id, cred_id)
		REFERENCES solardin.inin_credential (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);
