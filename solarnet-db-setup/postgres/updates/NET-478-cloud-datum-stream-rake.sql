/**
 * Cloud datum stream rake task table.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column ds_id 		the ID of the datum stream associated with this configuration
 * @column status 		task status, e.g. queued, executing, error
 * @column exec_at 		the next scheduled time for the poll task to execute
 * @column start_offset the offset from execution time to start raking at
 * @column message      the last message created for the task
 * @param sprops        task configuration
 */
CREATE TABLE solardin.cin_datum_stream_rake_task (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	ds_id 			BIGINT NOT NULL,
	status 			CHARACTER(1) NOT NULL,
	exec_at 		TIMESTAMP WITH TIME ZONE NOT NULL,
	start_offset 	INTERVAL NOT NULL,
	message 		TEXT,
	sprops 			JSONB,
	CONSTRAINT cin_datum_stream_rake_task_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_datum_stream_rake_task_ds_fk FOREIGN KEY (user_id, ds_id)
		REFERENCES solardin.cin_datum_stream (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- index to speed up claim task query
CREATE INDEX cin_datum_stream_rake_task_exec_idx ON solardin.cin_datum_stream_rake_task
	(exec_at) WHERE (status = 'q');

/**************************************************************************************************
 * FUNCTION solardin.claim_datum_stream_rake_task()
 *
 * "Claim" a rake task from the solardin.cin_datum_stream_rake_task table that has a status of 'q'
 * and change the status to 'p' and return it. The tasks will be claimed from oldest to newest
 * based on the exec_at column.
 *
 * @return the claimed row, if one was able to be claimed
 */
CREATE OR REPLACE FUNCTION solardin.claim_datum_stream_rake_task()
	RETURNS SETOF solardin.cin_datum_stream_rake_task LANGUAGE plpgsql VOLATILE ROWS 1 AS
$$
DECLARE
	rec solardin.cin_datum_stream_rake_task;

	-- include ORDER BY here to encourage cin_datum_stream_rake_task_exec_idx to be used
	curs CURSOR FOR SELECT * FROM solardin.cin_datum_stream_rake_task
			WHERE status = 'q'
			AND exec_at <= CURRENT_TIMESTAMP
			ORDER BY exec_at
			LIMIT 1
			FOR UPDATE SKIP LOCKED;
BEGIN
	OPEN curs;
	FETCH NEXT FROM curs INTO rec;
	IF FOUND THEN
		UPDATE solardin.cin_datum_stream_rake_task SET status = 'p' WHERE CURRENT OF curs;
		rec.status = 'p';
		RETURN NEXT rec;
	END IF;
	CLOSE curs;
	RETURN;
END
$$;


/**************************************************************************************************
 * TRIGGER function that automatically updates datum stream poll task statuses when updating
 * the enabled flag on an integration: stopping associated tasks when disabling the integration
 * and starting otherwise.
 */
CREATE OR REPLACE FUNCTION solardin.change_integration_enabled()
	RETURNS "trigger"  LANGUAGE plpgsql VOLATILE AS
$$
BEGIN
	UPDATE solardin.cin_datum_stream_poll_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id IN (
		SELECT cds.id
		FROM solardin.cin_datum_stream cds
		INNER JOIN solardin.cin_datum_stream_map cdsm ON cdsm.id = cds.map_id
		WHERE cds.user_id = NEW.user_id
		AND cdsm.int_id = NEW.id
		AND cds.enabled = TRUE
	);

	UPDATE solardin.cin_datum_stream_rake_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id IN (
		SELECT cds.id
		FROM solardin.cin_datum_stream cds
		INNER JOIN solardin.cin_datum_stream_map cdsm ON cdsm.id = cds.map_id
		WHERE cds.user_id = NEW.user_id
		AND cdsm.int_id = NEW.id
		AND cds.enabled = TRUE
	);

	RETURN NEW;
END
$$;

/**************************************************************************************************
 * TRIGGER function that automatically updates datum stream poll task statuses when updating
 * the enabled flag on a datum stream: stopping associated tasks when disabling the daum stream
 * and starting otherwise.
 */
CREATE OR REPLACE FUNCTION solardin.change_datum_stream_enabled()
	RETURNS "trigger"  LANGUAGE plpgsql VOLATILE AS
$$
BEGIN
	UPDATE solardin.cin_datum_stream_poll_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id = NEW.id
	AND EXISTS (
		SELECT 1
		FROM solardin.cin_datum_stream_map cdsm
		INNER JOIN solardin.cin_integration ci ON ci.id = cdsm.int_id
		WHERE ci.user_id = NEW.user_id
		AND cdsm.id = NEW.map_id
		AND ci.enabled = TRUE
	);

	UPDATE solardin.cin_datum_stream_rake_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id = NEW.id
	AND EXISTS (
		SELECT 1
		FROM solardin.cin_datum_stream_map cdsm
		INNER JOIN solardin.cin_integration ci ON ci.id = cdsm.int_id
		WHERE ci.user_id = NEW.user_id
		AND cdsm.id = NEW.map_id
		AND ci.enabled = TRUE
	);

	RETURN NEW;
END
$$;
