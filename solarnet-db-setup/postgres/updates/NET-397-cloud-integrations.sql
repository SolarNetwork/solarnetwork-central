CREATE SCHEMA IF NOT EXISTS solarcin;

/**
 * Cloud integration configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column cname 		a name for the configuration
 * @column sident 		the cloud integration service identifier
 * @column sprops 		the cloud integration service properties
 */
CREATE TABLE solarcin.cin_integration (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	sprops			jsonb,
	CONSTRAINT cin_integration_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_integration_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

/**
 * Cloud datum stream configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column id 			the ID of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column cname 		a name for the configuration
 * @column sident 		the cloud integration service identifier
 * @column int_id 		the ID of the cloud integration providing the datum stream
 * @column kind 		the datum stream object kind (key)
 * @column obj_id 		the datum stream object ID (node ID, location ID)
 * @column source_id 	the datum stream source ID
 * @column sprops 		the cloud integration service properties
 */
CREATE TABLE solarcin.cin_datum_stream (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	sident			CHARACTER VARYING(128) NOT NULL,
	int_id			BIGINT,
	schedule 		CHARACTER VARYING(64),
	kind 			CHARACTER(1) NOT NULL,
	obj_id 			BIGINT,
	source_id 		CHARACTER VARYING(64),
	sprops			jsonb,
	CONSTRAINT cin_datum_stream_pk PRIMARY KEY (user_id, id),
	CONSTRAINT cin_datum_stream_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT cin_datum_stream_int_fk FOREIGN KEY (user_id, int_id)
		REFERENCES solarcin.cin_integration (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE SET NULL
);

/**
 * Cloud datum stream property configuration.
 *
 * @column user_id 		the ID of the account owner
 * @column ds_id 		the ID of the datum stream associated with this configuration
 * @column idx 			the index (order) of the configuration
 * @column created		the creation date
 * @column modified		the modification date
 * @column enabled		a flag to mark the configuration as enabled for use by application or not
 * @column ptype 		the datum samples type (key)
 * @column pname 		the datum stream property name to populate
 * @column vtype		the value type (reference or expression)
 * @column vref 		the cloud data source value reference, or expression
 * @column mult 		an optional multiplication factor to apply to values
 * @column scale 		an optional maximum number of decimal places to round values to
 */
CREATE TABLE solarcin.cin_datum_stream_prop (
	user_id			BIGINT NOT NULL,
	ds_id 			BIGINT NOT NULL,
	idx				SMALLINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	ptype			CHARACTER(1) NOT NULL,
	pname			CHARACTER VARYING(64) NOT NULL,
	vtype			CHARACTER(1) NOT NULL,
	vref			CHARACTER VARYING(4096) NOT NULL,
	mult			NUMERIC,
	scale			SMALLINT,
	CONSTRAINT cin_datum_stream_prop_pk PRIMARY KEY (user_id, ds_id, idx),
	CONSTRAINT cin_datum_stream_prop_ds_fk FOREIGN KEY (user_id, ds_id)
		REFERENCES solarcin.cin_datum_stream (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

/**
 * Cloud datum stream poll task table.
 * 
 * @column user_id 		the ID of the account owner
 * @column ds_id 		the ID of the datum stream associated with this configuration
 * @column status 		task status, e.g. queued, executing, error
 * @column exec_at 		the next scheduled time for the poll task to execute
 * @column start_at     the starting date to query data from
 */
CREATE TABLE solarcin.cin_datum_stream_poll_task (
	user_id			BIGINT NOT NULL,
	ds_id 			BIGINT NOT NULL,
	status 			CHARACTER(1) NOT NULL,
	exec_at 		TIMESTAMP WITH TIME ZONE NOT NULL,
	start_at 		TIMESTAMP WITH TIME ZONE NOT NULL,
	message 		TEXT,
	sprops 			JSONB,
	CONSTRAINT cin_datum_stream_poll_task_pk PRIMARY KEY (user_id, ds_id),
	CONSTRAINT cin_datum_stream_poll_task_ds_fk FOREIGN KEY (user_id, ds_id)
		REFERENCES solarcin.cin_datum_stream (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- index to speed up claim task query
CREATE INDEX cin_datum_stream_poll_task_exec_idx ON solarcin.cin_datum_stream_poll_task
	(exec_at) WHERE status = 'q';

/**************************************************************************************************
 * FUNCTION solarnet.claim_datum_export_task()
 *
 * "Claim" an export task from the solarnet.sn_datum_export_task table that has a status of 'q'
 * and change the status to 'p' and return it. The tasks will be claimed from oldest to newest
 * based on the created column.
 *
 * @return the claimed row, if one was able to be claimed
 */
CREATE OR REPLACE FUNCTION solarcin.claim_datum_stream_poll_task()
	RETURNS SETOF solarcin.cin_datum_stream_poll_task LANGUAGE plpgsql VOLATILE ROWS 1 AS
$$
DECLARE
	rec solarcin.cin_datum_stream_poll_task;
	curs CURSOR FOR SELECT * FROM solarcin.cin_datum_stream_poll_task
			WHERE status = 'q'
			AND exec_at <= CURRENT_TIMESTAMP
			LIMIT 1
			FOR UPDATE SKIP LOCKED;
BEGIN
	OPEN curs;
	FETCH NEXT FROM curs INTO rec;
	IF FOUND THEN
		UPDATE solarcin.cin_datum_stream_poll_task SET status = 'p' WHERE CURRENT OF curs;
		rec.status = 'p';
		RETURN NEXT rec;
	END IF;
	CLOSE curs;
	RETURN;
END
$$;


/**************************************************************************************************
 * TRIGGER function that automatically updates datum stream poll task statuses when updating
 * the enabled flag on an integration: stopping associated tasks when disabling the integration
 * and starting otherwise.
 */
CREATE OR REPLACE FUNCTION solarcin.change_integration_enabled()
	RETURNS "trigger"  LANGUAGE plpgsql VOLATILE AS
$$
BEGIN
	UPDATE solarcin.cin_datum_stream_poll_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id IN (
		SELECT id
		FROM solarcin.cin_datum_stream
		WHERE user_id = NEW.user_id
		AND int_id = NEW.id
		AND enabled = TRUE
	);

	RETURN NEW;
END
$$;

CREATE TRIGGER change_integration_enabled
  BEFORE UPDATE
  ON solarcin.cin_integration
  FOR EACH ROW
  WHEN (OLD.enabled IS DISTINCT FROM NEW.enabled)
  EXECUTE PROCEDURE solarcin.change_integration_enabled();

/**************************************************************************************************
 * TRIGGER function that automatically updates datum stream poll task statuses when updating
 * the enabled flag on a datum stream: stopping associated tasks when disabling the daum stream
 * and starting otherwise.
 */
CREATE OR REPLACE FUNCTION solarcin.change_datum_stream_enabled()
	RETURNS "trigger"  LANGUAGE plpgsql VOLATILE AS
$$
BEGIN
	UPDATE solarcin.cin_datum_stream_poll_task
	SET status = CASE NEW.enabled WHEN TRUE THEN 'q' ELSE 'c' END
	WHERE status =  CASE NEW.enabled WHEN TRUE THEN 'c' ELSE 'q' END
	AND user_id = NEW.user_id
	AND ds_id = NEW.id
	AND EXISTS (
		SELECT 1
		FROM solarcin.cin_integration
		WHERE user_id = NEW.user_id
		AND id = NEW.int_id
		AND enabled = TRUE
	);

	RETURN NEW;
END
$$;

CREATE TRIGGER change_datum_stream_enabled
  BEFORE UPDATE
  ON solarcin.cin_datum_stream
  FOR EACH ROW
  WHEN (OLD.enabled IS DISTINCT FROM NEW.enabled)
  EXECUTE PROCEDURE solarcin.change_datum_stream_enabled();
