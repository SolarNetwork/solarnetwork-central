/*
DROP TABLE IF EXISTS solaroscp.oscp_fp_token CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_cp_conf CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_cp_heartbeat CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_cp_setting CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_cp_token CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_co_conf CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_co_heartbeat CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_co_setting CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_co_token CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_cg_conf CASCADE;
DROP TABLE IF EXISTS solaroscp.oscp_asset_conf CASCADE;
*/

CREATE SCHEMA IF NOT EXISTS solaroscp;

/**
 * OSCP Flexibility Provider tokens.
 */
CREATE TABLE solaroscp.oscp_fp_token (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED ALWAYS AS IDENTITY,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT TRUE,
	token			CHARACTER VARYING(64) NOT NULL,
	CONSTRAINT oscp_fp_token_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_fp_token_unq UNIQUE (token)
);

CREATE UNIQUE INDEX oscp_fp_token_idx ON solaroscp.oscp_fp_token (token);

/**
 * OSCP Capacity Provider configuration.
 */
CREATE TABLE solaroscp.oscp_cp_conf (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	fp_id			BIGINT NOT NULL,
	reg_status		SMALLINT NOT NULL,
	cname			CHARACTER VARYING(64) NOT NULL,
	url				CHARACTER VARYING(256),
	oscp_ver		CHARACTER VARYING(8),
	heartbeat_secs	SMALLINT,                 -- requested
	meas_styles		SMALLINT[],               -- requested
	offline_at		TIMESTAMP WITH TIME ZONE, -- from heartbeat
	sprops			JSONB,
	CONSTRAINT oscp_cp_conf_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_cp_conf_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT oscp_cp_conf_fp_fk FOREIGN KEY (user_id, fp_id)
		REFERENCES solaroscp.oscp_fp_token (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT oscp_cp_conf_url_unq UNIQUE (user_id, url)
);

CREATE INDEX oscp_cp_conf_offline_idx ON solaroscp.oscp_cp_conf (offline_at);

/**
 * OSCP Capacity Provider heartbeat.
 */
CREATE TABLE solaroscp.oscp_cp_heartbeat (
	user_id			BIGINT NOT NULL,
	id				BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	heartbeat_at	TIMESTAMP WITH TIME ZONE, -- last sent
	CONSTRAINT oscp_cp_heartbeat_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_cp_heartbeat_conf_fk FOREIGN KEY (user_id, id)
		REFERENCES solaroscp.oscp_cp_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- Add index on heartbeat_at to support efficient heartbeat job execution
CREATE INDEX oscp_cp_heartbeat_idx ON solaroscp.oscp_cp_heartbeat (heartbeat_at);

/**
 * OSCP Capacity Provider tokens.
 */
CREATE TABLE solaroscp.oscp_cp_token (
	user_id			BIGINT NOT NULL,
	id				BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	token			CHARACTER VARYING(64) NOT NULL,
	CONSTRAINT oscp_cp_token_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_cp_token_conf_fk FOREIGN KEY (user_id, id)
		REFERENCES solaroscp.oscp_cp_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

/**
 * OSCP Capacity Optimizer configuration.
 */
CREATE TABLE solaroscp.oscp_co_conf (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	fp_id			BIGINT NOT NULL,
	reg_status		SMALLINT NOT NULL,
	cname			CHARACTER VARYING(64) NOT NULL,
	url				CHARACTER VARYING(256),
	oscp_ver		CHARACTER VARYING(8),
	heartbeat_secs	SMALLINT,                 -- required
	meas_styles		SMALLINT[],               -- required
	offline_at		TIMESTAMP WITH TIME ZONE, -- from heartbeat
	sprops			JSONB,
	CONSTRAINT oscp_co_conf_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_co_conf_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT oscp_co_conf_fp_fk FOREIGN KEY (user_id, fp_id)
		REFERENCES solaroscp.oscp_fp_token (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT oscp_co_conf_url_unq UNIQUE (user_id, url)
);

CREATE INDEX oscp_co_conf_offline_idx ON solaroscp.oscp_co_conf (offline_at);

/**
 * OSCP Capacity Provider heartbeat.
 */
CREATE TABLE solaroscp.oscp_co_heartbeat (
	user_id			BIGINT NOT NULL,
	id				BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	heartbeat_at	TIMESTAMP WITH TIME ZONE, -- last sent
	CONSTRAINT oscp_co_heartbeat_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_co_heartbeat_conf_fk FOREIGN KEY (user_id, id)
		REFERENCES solaroscp.oscp_co_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

-- Add index on heartbeat_at to support efficient heartbeat job execution
CREATE INDEX oscp_co_heartbeat_idx ON solaroscp.oscp_co_heartbeat (heartbeat_at);

/**
 * OSCP Capacity Optimizer settings.
 */
CREATE TABLE solaroscp.oscp_co_setting (
	user_id			BIGINT NOT NULL,
	id				BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	heartbeat_at	TIMESTAMP WITH TIME ZONE,
	CONSTRAINT oscp_co_setting_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_co_setting_conf_fk FOREIGN KEY (user_id, id)
		REFERENCES solaroscp.oscp_co_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

/**
 * OSCP Capacity Optimizer tokens.
 */
CREATE TABLE solaroscp.oscp_co_token (
	user_id			BIGINT NOT NULL,
	id				BIGINT NOT NULL,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	token			CHARACTER VARYING(64) NOT NULL,
	CONSTRAINT oscp_co_token_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_co_token_conf_fk FOREIGN KEY (user_id, id)
		REFERENCES solaroscp.oscp_co_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

/**
 * OSCP Capacity Group configuration.
 */
CREATE TABLE solaroscp.oscp_cg_conf (
	user_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	ident			CHARACTER VARYING(128) NOT NULL,
	meas_secs		INTEGER NOT NULL CHECK (meas_secs > 0),
	cp_id			BIGINT NOT NULL,
	co_id			BIGINT NOT NULL,
	sprops			JSONB,
	CONSTRAINT oscp_cg_conf_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_cg_conf_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT oscp_cg_conf_cp_fk FOREIGN KEY (user_id, cp_id)
		REFERENCES solaroscp.oscp_cp_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT oscp_cg_conf_co_fk FOREIGN KEY (user_id, co_id)
		REFERENCES solaroscp.oscp_co_conf (user_id,id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT oscp_cg_conf_unq UNIQUE (user_id, ident)
);

/**
 * OSCP Asset configuration.
 *
 * The `iprops*` and `eprops*` columns define the datum stream properties to include
 * in the asset measurement. The `*_unit` column defines the unit used in OSCP,
 * and the `*_mult` column defines a mutliplication factor to multiply the datum
 * property values by to convert to the defined unit. For example if the unit is
 * defined as `kW` but the datum property is in `W`, a multiplier of `1000` should
 * be configured.
 *
 * For instantaneous measurements, the datum stream properties are assumed to have
 * an `Instantaneous` datum property classification. Energy measurements are assumed
 * to have `Accumulating` datum property classification.
 */
CREATE TABLE solaroscp.oscp_asset_conf (
	user_id			BIGINT NOT NULL,
	cg_id			BIGINT NOT NULL,
	id				BIGINT GENERATED BY DEFAULT AS IDENTITY,
	created			TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	modified		TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	enabled			BOOLEAN NOT NULL DEFAULT FALSE,
	cname			CHARACTER VARYING(64) NOT NULL,
	node_id			BIGINT NOT NULL,
	source_id		CHARACTER VARYING(64) NOT NULL,
	category		SMALLINT NOT NULL,		-- asset category
	iprops          TEXT[] NOT NULL,		-- instantaneous measurement datum property names
	iprops_unit		SMALLINT NOT NULL,		-- instantaneous measurement datum property unit enum
	iprops_mult		DECIMAL,				-- instantaneous measurement multiplication factor
	iprops_phase	SMALLINT NOT NULL,		-- instantaneous phase
	eprops          TEXT[] NOT NULL,		-- energy measurement datum property names
	eprops_unit		SMALLINT NOT NULL,		-- energy measurement datum property unit enum
	eprops_mult		DECIMAL,				-- energy measurement multiplication factor
	etype			SMALLINT NOT NULL,		-- energy type
	sprops			JSONB,
	CONSTRAINT oscp_asset_conf_pk PRIMARY KEY (user_id, id),
	CONSTRAINT oscp_asset_conf_user_fk FOREIGN KEY (user_id)
		REFERENCES solaruser.user_user (id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE,
	CONSTRAINT oscp_asset_conf_cg_fk FOREIGN KEY (user_id, cg_id)
		REFERENCES solaroscp.oscp_cg_conf (user_id, id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE CASCADE
);

/**
 * Create a Flexibility Provider token.
 *
 * @param uid 	the user ID
 * @param cid 	IGNORED (held for compatibility with other create_X_token functions)
 * @return		the generated token
 */
CREATE OR REPLACE FUNCTION solaroscp.create_fp_token(uid BIGINT, cid BIGINT)
RETURNS CHARACTER VARYING(64) LANGUAGE SQL VOLATILE AS
$$
	INSERT INTO solaroscp.oscp_fp_token (user_id, token)
	VALUES (uid, encode(gen_random_bytes(48), 'base64'))
	RETURNING token
$$;

/**
 * Update a Flexibility Provider token.
 *
 * @param uid 	the user ID
 * @param cid 	the entity ID
 * @return		the generated token
 */
CREATE OR REPLACE FUNCTION solaroscp.update_fp_token(uid BIGINT, cid BIGINT)
RETURNS CHARACTER VARYING(64) LANGUAGE SQL VOLATILE AS
$$
	UPDATE solaroscp.oscp_fp_token
	SET token = encode(gen_random_bytes(48), 'base64')
	WHERE user_id = uid AND id = cid
	RETURNING token
$$;

/**
 * Find a Flexibility Provider identifier for a given token.
 *
 * @param tok 	the token to get the data for
 * @return		the matching identifier rows (at most 1)
 */
CREATE OR REPLACE FUNCTION solaroscp.fp_id_for_token(tok TEXT)
RETURNS TABLE (
	user_id BIGINT,
	id		BIGINT
) LANGUAGE SQL STABLE STRICT ROWS 1 AS
$$
	SELECT user_id, id
	FROM solaroscp.oscp_fp_token
	WHERE token = tok AND enabled = TRUE
$$;

/**
 * Create or update a Capacity Provider token.
 *
 * @param uid 	the user ID
 * @param cid 	the Capacity Provider (solaroscp.oscp_cp_conf) ID
 * @param tok   the token to save
 */
CREATE OR REPLACE FUNCTION solaroscp.save_cp_token(uid BIGINT, cid BIGINT, tok TEXT)
RETURNS VOID LANGUAGE SQL VOLATILE AS
$$
	INSERT INTO solaroscp.oscp_cp_token (user_id, id, token)
	VALUES (uid, cid, tok)
	ON CONFLICT (user_id, id) DO UPDATE SET
		token = EXCLUDED.token
$$;

/**
 * Get a Capacity Provider token.
 *
 * @param uid 	the user ID
 * @param cid 	the Capacity Provider (solaroscp.oscp_cp_conf) ID
 * @return the token
 */
CREATE OR REPLACE FUNCTION solaroscp.get_cp_token(uid BIGINT, cid BIGINT)
RETURNS TEXT LANGUAGE SQL STABLE AS
$$
	SELECT token FROM solaroscp.oscp_cp_token WHERE user_id = uid AND id = cid
$$;

/**
 * Create or update a Capacity Optimizer token.
 *
 * @param uid 	the user ID
 * @param cid 	the Capacity Optimizer (solaroscp.oscp_co_conf) ID
 * @param tok   the token to save
 */
CREATE OR REPLACE FUNCTION solaroscp.save_co_token(uid BIGINT, cid BIGINT, tok TEXT)
RETURNS VOID LANGUAGE SQL VOLATILE AS
$$
	INSERT INTO solaroscp.oscp_co_token (user_id, id, token)
	VALUES (uid, cid, tok)
	ON CONFLICT (user_id, id) DO UPDATE SET
		token = EXCLUDED.token
$$;

/**
 * Get a Capacity Optimizer token.
 *
 * @param uid 	the user ID
 * @param cid 	the Capacity Optimizer (solaroscp.oscp_co_conf) ID
 * @return the token
 */
CREATE OR REPLACE FUNCTION solaroscp.get_co_token(uid BIGINT, cid BIGINT)
RETURNS TEXT LANGUAGE SQL STABLE AS
$$
	SELECT token FROM solaroscp.oscp_co_token WHERE user_id = uid AND id = cid
$$;

/**
 * Find configuration information for a flexibility provider ID.
 *
 * @param uid 	the user ID
 * @param cid 	the Flexibility Provider (solaroscp.oscp_fp_token) ID
 * @return		the matching identifier rows (at most 1)
 */
CREATE OR REPLACE FUNCTION solaroscp.conf_id_for_fp_id(uid BIGINT, fid BIGINT)
RETURNS TABLE (
	user_id 	BIGINT,
	entity_id	BIGINT,
	role_alias	TEXT
) LANGUAGE SQL STABLE STRICT ROWS 1 AS
$$
	SELECT c.user_id, c.id, 'cp' AS role_alias
	FROM solaroscp.oscp_fp_token f
	INNER JOIN solaroscp.oscp_cp_conf c ON c.user_id = f.user_id AND c.fp_id = f.id
	WHERE f.user_id = uid AND f.id = fid AND f.enabled = TRUE
	UNION ALL
	SELECT c.user_id, c.id, 'co' AS role_alias
	FROM solaroscp.oscp_fp_token f
	INNER JOIN solaroscp.oscp_co_conf c ON c.user_id = f.user_id AND c.fp_id = f.id
	WHERE f.user_id = uid AND f.id = fid AND f.enabled = TRUE
$$;
