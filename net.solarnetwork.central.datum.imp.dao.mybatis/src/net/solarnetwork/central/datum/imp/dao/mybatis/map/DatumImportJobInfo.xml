<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.imp.domain.DatumImportJobInfo">

	<update id="update-DatumImportJobInfo" parameterType="net.solarnetwork.central.datum.imp.domain.DatumImportJobInfo">
		INSERT INTO solarnet.sn_datum_import_job (
			id
			, user_id
			<if test="created != null">, created</if>
			<if test="modified != null">, modified</if>
			, import_date
			, state
			, config
			, success
			, message
			, completed
		) VALUES (
			#{uuid,typeHandler=net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler}
			, ${userId}
			<if test="created != null">, #{created}</if>
			<if test="modified != null">, #{modified}</if>
			, #{importDate}
			, #{importStateKey}
			, #{configJson}::jsonb
			, #{jobSuccess}
			, #{message}
			, #{completed}
		)
		ON CONFLICT (user_id, id) DO UPDATE
		SET state = EXCLUDED.state,
			modified = EXCLUDED.modified,
			success = EXCLUDED.success,
			message = EXCLUDED.message,
			completed = EXCLUDED.completed;
	</update>
	
	<sql id="fragment-DatumImportJobInfo-full-result">
		dij.id AS datum_import_job_id,
		dij.user_id AS datum_import_job_user_id,
		dij.created AS datum_import_job_created,
		dij.modified AS datum_import_job_modified,
		dij.import_date AS datum_import_job_import_date,
		dij.state AS datum_import_job_state,
		dij.config AS datum_import_job_config,
		dij.success AS datum_import_job_success,
		dij.message AS datum_import_job_message,
		dij.completed AS datum_import_job_completed
	</sql>
	
	<resultMap id="DatumImportJobInfoFullResult" type="net.solarnetwork.central.datum.imp.domain.DatumImportJobInfo">
		<id property="uuid" column="datum_import_job_id" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
		<id property="userId" column="datum_import_job_user_id"/>
		<result property="created" column="datum_import_job_created"/>
		<result property="modified" column="datum_import_job_modified"/>
		<result property="importDate" column="datum_import_job_import_date"/>
		<result property="importStateKey" column="datum_import_job_state"/>
		<result property="configJson" column="datum_import_job_config"/>
		<result property="jobSuccess" column="datum_import_job_success"/>
		<result property="message" column="datum_import_job_message"/>
		<result property="completed" column="datum_import_job_completed"/>
	</resultMap>

	<resultMap id="DatumImportJobInfoDirectResult" type="net.solarnetwork.central.datum.imp.domain.DatumImportJobInfo">
		<id property="uuid" column="id" typeHandler="net.solarnetwork.central.dao.mybatis.type.UUIDTypeHandler"/>
		<id property="userId" column="user_id"/>
		<result property="created" column="created"/>
		<result property="modified" column="modified"/>
		<result property="importDate" column="import_date"/>
		<result property="importStateKey" column="state"/>
		<result property="configJson" column="config"/>
		<result property="jobSuccess" column="success"/>
		<result property="message" column="message"/>
		<result property="completed" column="completed"/>
	</resultMap>
	
	<select id="get-DatumImportJobInfo-for-id" parameterType="net.solarnetwork.central.user.domain.UserUuidPK" resultMap="DatumImportJobInfoFullResult">
		SELECT
			<include refid="fragment-DatumImportJobInfo-full-result"/>
		FROM
			solarnet.sn_datum_import_job dij
		WHERE
			dij.id = #{id} AND dij.user_id = #{userId}
	</select>

	<select id="get-DatumImportJobInfo-for-claim" resultMap="DatumImportJobInfoDirectResult" statementType="CALLABLE">
		{call solarnet.claim_datum_import_job()}
	</select>
	
	<select id="find-DatumImportJobInfo-for-user" parameterType="map" resultMap="DatumImportJobInfoFullResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-DatumImportJobInfo-full-result"/>
		FROM
			solarnet.sn_datum_import_job dij
		WHERE
			dij.user_id = #{userId}
			<if test="states != null and states.length > 0">
			AND state = ANY(#{states,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
		ORDER BY
			dij.created, dij.id
	</select>
	
	<delete id="delete-DatumImportJobInfo-completed" parameterType="map" statementType="CALLABLE">
		{#{result, mode=OUT, jdbcType=BIGINT} = call solarnet.purge_completed_datum_import_jobs(
			#{date, mode=IN, jdbcType=TIMESTAMP}
		)}
	</delete>
	
	<update id="update-DatumImportJobInfo-state" parameterType="map">
		UPDATE
			solarnet.sn_datum_import_job
		SET
			state = #{desiredState}
		WHERE
			id = #{id.id}
			AND user_id = #{id.userId}
			<if test="expectedStates != null and expectedStates.length > 0">
			AND state = ANY(#{expectedStates,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
	</update>

</mapper>